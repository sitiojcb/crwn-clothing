
---------------------------------------Section 4 ------------------------------------------------------------
--------------------------Master project - setting up E-COMMERCE
video 56 -- linkedin

If you are looking to improve your LinkedIn profile and have others endorse your skills, we have a private ZTM LinkedIn group here. LinkedIn allows you to have recruiters message you with lots of job opportunities. You can join the group by clicking on "LinkedIn Group" and then go ahead and endorse some of the member's skills (other people will do the same for you as they join).

If you have any questions, reach out in our private Discord chat community in the #job-hunting channel!

UPDATE!!! Zero to Mastery is officially a recognized school!

What does this mean for you? It means that you can add it as an educational institution on LinkedIn as part of your profile to wow those employers (as your education history). Check it out here. To add it to your profile:

Step 1: Go to personal LinkedIn profile

Step 2: Scroll down to the Education section

Step 3: Click the +

Step 4: Type in Zero To Mastery Academy
----------------------------------------------------------------------------------------------------------------
video 57 -- the long road ahead 

para pagos usamos la api de Stripe 
login con cuenta de google 
firebase 
---------------------------------------------------------------------------------------------------
video 58 -- project overview
---------------------------------------------------------------------------------------------------
video 59 -- github project repo

github.com/ZhangMYihua 
ver lessonNum.. por si tengo problemas 

git clone https://github.com/ZhangMYihua/lesson-1.git nombreCarpeta
npm install 

luego de trabajar en el proyecto supongamos lo quiero subir a mi repo personal...
git remote veo sale origin
git remote remove origin 
me logeo en mi cuenta de github creo una repo para este proyecto
git remote add origin https://github...mirepo 

pregunta: git add . vs git add -A ??
resp:
Note: The command git add . only stages files in the current directory and not any subdirectories, whereas git add -A will stage files in subdirectories as well.
---------------------------------------------------------------------------------------------
 If you wish to make commits and push code up after cloning down from any of the GitHub links, you should actually fork the project first. The reason for this is because the GitHub project links provided are pointing to repositories you do not own, in order to own the repository, you have to fork it so you get a copy of the project in your own GitHub account that you do own!

 ----------------------------------------------------------------------------------------------------------
 video 62 -- e commerce homepage + sass 
 
 recordar usar powershell como administrador para no tener permiso de escritura en Datos/

 npx create-react-app crwn-clothing

en el proyecto usamos sass:
 https://www.npmjs.com/package/node-sass

 npm install node-sass
(en caso de necesitar borrar usa rm -rf .... o rm -rf node_modules)

 
npm install 

creamos src/homepage.styles.scss (descargue los estilos )

creamos src/homepage.component.jsx (importo sass)
se trata de un functional component porque no vamos a necesitar state o life cycle

quitamos de index.js
serviceWorker.unregister();
y el header de App.js 
borramos contenido de App.css

git remote add origin https://github.com/sitiojcb/crwn-clothing.git

git remote add origin git@github.com:sitiojcb/crwn-clothing.git
git status 

git add -A 

git commit -m"created project with react and added files for homepage" 
git push origin master 

---------------------------------------------------------------------------------
video 63 -- project files + Modules 

comenta que en versiones anteriores jest (para testeo) causaba errores.
ahora lo han quitado 

------------------------------------------------------------------------------------
video 64 -- project component architecture 

comenta usar react extension para Chrome
esta extension se actualizo ,  no lo voy a ver como en el video 
debo buscar: components y profiler 

pregunta: export default vs const...
resp:
export const is named export, this is how you import it

import {abc} from 'abc'
--------
export default is unnamed export, this is how import it

import anyname from 'abc'
------------------------------------------------------------------------------------
video 65 -- css y scss 
comenta lo van a proporcionar ellos.
-----------------------------------------------------------------------------------
video 66 -- homepage and directory components 

crea carpetas:
components componentes reusables
pages paginas

muevo homepage.components.jsx y actualizo en App.js 
para menu-items.component usamos functional component 
const MenuItem = () => (
    uso parentesis para evitar escribir return {}
)
------------
comenta que en lugar de pasarle props como parametro y luego usar props.title 
simplemente uso destructure con {title}

comenta que directory.component necesito sea class component porque necesito guardar el state de los menu-items

comenta que en react podemos pasar los estilos con 
    backgroundImage: `url(${imageUrl})`
    }}>
    aca imageUrl viene como prop 

ver mas template literals 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
------------------------------------------------------------------------------------
video 67 -- styling menu-items 

cubic bezier 
https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function

google font source open sans condensed 
https://fonts.google.com/?query=open+sans+condensed&selection.family=Open+Sans+Condensed:wght@300&sidebar.open=true

en public/ index.html agregamos:
<link href="https://fonts.googleapis.com/css2?family=Open+Sans+Condensed:wght@300&display=swap" rel="stylesheet">
luego en App.css en el body agrego:
font-family: 'Open Sans Condensed', sans-serif;

-----
git add .
git commit -m "broken homepage into small comp and style menu-item comp"
git push origin master 
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------Section 5 ------------------------------------------------------------------------
----------------------------------------------------React router and routing -------------------------------------------------------------------
video 68 -- routing in react 

se usa paquete react route 
comenta que esta libreria usa algo provisto por el navegador llamado history api 
--------
Earlier, in single page application, there is an issue of navigation, we can't back and forth as there are no other link or pages, but with react router, which makes the  use of history API provided by browser, which allows single page application to go back and forth without any issues. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
video 69 -- routing in our project 

react router documentation 
https://reactrouter.com/web/guides/quick-start

react router dom 
https://www.npmjs.com/package/react-router-dom

npm install --save react-router-dom

sirve para cuando tengo varias paginas. hay otras librerias pero esta es la mas popular.

nota: ver que en el video resuelve problema creado en  la instalacion con una version de jest ... yo no lo tuve porque instale versiones compatibles mas nuevas 
---------------
para usar react dom necesito importarlo en index.js 
import { BrowserRouter } from "react-router-dom";

BrowserRouter es un componente. por eso lo coloca envolviendo al otro.

y en App.js 
lo importo y cambio <HomePage /> por 
  <Route exact path='/' component={HomePage} />

component por el componente que quiero renderizar 
path='/' cuando visito / significa vemos el componente HomePage
exact por defecto es true, significa que si paso / debe ser exacto 

luego usa Switch que se supone ayuda ya que renderiza lo primero que encuentra en el path 
da ej de '/' y de '/hats' hay entonces mas de una ruta, con switch al encontrar / renderiza eso y nada mas.
sostiene que ayuda a que no se rendericen varios componentes/rutas por accidente 

lo usa sin exact o exact='false' 

mas info switch:
https://dev.to/danhjoo7/using-a-switch-component-in-react-router-d2k
--------------------------------------------------------------------------------------
video 70 -- react router dom 

demo:
A small app bootstrapped with CRA to explain basics of react-routing

https://github.com/ZhangMYihua/react-router-demo


-------------------------------------------------------------------------------------
video 71 -- withRouter() 

Higher order components 
https://reactjs.org/docs/higher-order-components.html

Concretely, a higher-order component is a function that 
takes a component and returns a new component.

comenta que el problema de usar history en el router es que debo pasar como props a los childrens... se va haciendo engorroso.
(lo llaman tambien prop drilling es cuando se pasan todas esas props en este caso history a traves de los childrens.)

otra solucion es usar Higher order component {withRouter}
por eso importo en menu-item.component
import { withRouter } from 'react-router-dom';
luego exporto 
export default withRouter(MenuItem);
y ahora el componente MenuItem tiene acceso a location/match que necesitamos para el link

----
en directory.component cambio
{this.state.sections.map(({title, imageUrl, id, size}) => (
<MenuItem key={id} title={title} imageUrl={imageUrl} size={size} />
 ))}
 por 
  {this.state.sections.map(({ id, ...otherSectionProps }) => (
  <MenuItem key={id} {...otherSectionProps} />
  ))}
  ya que comenta que en lugar de agregar por ej linkUrl usamos la ventaja de js6 con destructuring ... 
  git add .
  git commit -m "update withRouter HOC"
  git push origin master 

--------------------------------------------------------------------------------------
------------------------------Section 6 -----------------------------------------------
---------------------------Form components ------------------------------------------
video 72 -- shoping data 
descargo fotos o uso const shop 

---------------------------------------------------------------------------------------
video 73 -- shop page 

creo shop folder dentro de pages y coloco shop.component.jsx 
creo components/collection-preview y collection-preview.component.jsx 
-------------------------------------------------------------------------------
video 74 -- collection item 

creo collection-item y collection-item.component.jsx
luego en collection-preview.component 
lo importo y cambio 
<div key={item.id}>{item.name}</div>
por 
 items.filter((item,idx) => idx<4 ).map((id, ...otherItemProps) => (
  <CollectionItem key={id} {...otherItemProps} />
))

git status 
git add -A 
git commit -m "update collection-preview collection-item"
git push origin master 
-------------------------------------------------------------------------
video 75 -- header component

creamos header 
y assets /crown.svg 
ver que para importar svg has sintaxis especial en react !!
import {ReactComponent as Logo} from ..
luego usamos como <Logo> 
--
comenta que para que el header este presente lo colocamos por encima del switch 
 <Header />

 -----------
 pregunta:
 cuando sigo el link del navegador puedo ir a la pag sin problema, pero si coloco la url directamente no, voy a 404 por que?

 resp:
 https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages

pregunta:
Why didn't we use <img src="..svg path"> instead of importing it as a component?
resp:
both methods work, use whatever you like
---
problemas usando otro logo comentan usar:
<Logo className='logo'  height="60px" width="60px"/>
mas logos svg en 
https://www.flaticon.com/free-icon/dollar_3037150?term=price&page=1&position=53


git status 
git add -A 
git commit -m "adding header" 
git push origin master 

------------------------------------------------------------------
video 76 -- importing svg in react
import { ReactComponent as Logo }

This is a new special syntax when importing SVG in React. The ReactComponent import name is special and tells Create React App that you want a React component that renders an SVG, rather than its filename. You can read more about it here, but keep in mind that this is a React library special syntax:

https://facebook.github.io/create-react-app/docs/adding-images-fonts-and-files

--------------------------------------------------------------------------------------
video 77 -- forms in react 

https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form

eventPreventDefault()
https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault

vamos a ver user authentication 
comenta que como tenemos por ej botones que se repiten en un formulario.. vamos a hacer un componente reusable.
cada componente sign in y register van a tener cada uno su propio state.
comenta que no hace falta compartir entre ambos por eso no necesita colocar el state en la pagina por encima de estos componentes.
comenta que como regla conviene tener el state en el nivel mas bajo posible 
--------------------------------------------------------------------------------------
video 78 -- sign in component 
creo dentro de pages sign-in-and-sign-up
y dentro sign-in-and-sign-up.component.jsx 
---
luego en components creo sign-in/sign-in.component 
comenta que 
 this.setState({ [name] : value}) aca [name] va a ser email y luego password.

 pregunta mia:
 porque usamos required !! no hay algo nativo en react para chequear errores?
 y sanitizar las entradas? 
 ---------------------------------------------------------------------------------------
 video 79 -- form input component 

 creo components/form-input/form-input.component.jsx
comenta 
const FormInput = ({ handleChange, label, ...otherProps }) 
necesito handleChange porque bubbleUp any onChange that input have 
-colocamos el label y el input juntos en un div group 
-necesito el label como prop para usarlo selectivamente 

 comenta:
   (<label className={`${otherProps.value.length ? 'shrink' : ''}`} form-input-label>{label}</label>) 
   siempre vamos a tener clase form-input-label pero cuando el usuario agrega o tipea algo vamos a ver que agrega clase shrink 

importamos FormInput en sign-in.component y cambio
<form onSubmit={this.handleSubmit}>
<input name="email" type="email"
por 
<form onSubmit={this.handleSubmit}>
<FormInput name="email" type="email"
--
tambien cambio:
 onChange={this.handleChange}
 por 
 handleChange 
 agrego ademas label="email" y quito el 
 <label>Email</label>

-------------------------------------------------------------------------------------
video 80 -- custom button 

creo custom-button/custom-button.component.jsx 
luego cambio en sign-in.component.jsx
<input type="submit"  value="Submit Form" />
por 
<CustomButton type="submit">
Sign In
</CustomButton>
-------------------------------------------------------------------------------------
---------------------------------Section 7 ------------------------------------------
------------------------Firebase + User authentication ------------------------------
video 81 -- overview 

necesitamos guardar la info recibida en una base de datos 
vamos a usar firebase 
---------------------------------------------------------------------------------------
video 82 -- firebase intro 

https://firebase.google.com/

backend:
1 server 
2 database 
3 authentication 
----------
hasta ahora usamos shop.data.js para la info pero es a modo de ejemplo.
en la realidad necesitamos una base de datos.


pregunta: mongodb vs firebase ?
resp: parece que firebase resuelve mas que solo database... 
----------------------------------------------------------------------------------------
video 83 -- adding a project to firebase 

https://www.npmjs.com/package/firebase

me logeo en 
https://firebase.google.com/
go to console 
add project (lo nombro crwn-db)
--creo app asociado con webjcb para google analytics

una vez creado nos lleva al dashboard 
sobre el sidebar vemos diferentes planes 
usamos el free -- spark
----
vemos tambien en el sidebar el sector Develop 
nos interesan authentication y database 
comenta que storage es para videos/imagenes assets en general 
-----------
desde la ventana principal vemos el icono </> que es el de web !!

me pide registrar app con un nickname...usamos el mismo crwn-db 
comenta que no necesitmos la parte de hosting 
---
me da el sdk:
<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/7.19.0/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries -->
<script src="https://www.gstatic.com/firebasejs/7.19.0/firebase-analytics.js"></script>

<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyCq_FqyhvOMizfVEbDMykbbe69NL71Ynd4",
    authDomain: "crwn-db-79248.firebaseapp.com",
    databaseURL: "https://crwn-db-79248.firebaseio.com",
    projectId: "crwn-db-79248",
    storageBucket: "crwn-db-79248.appspot.com",
    messagingSenderId: "732625627403",
    appId: "1:732625627403:web:58576922fff33f87271a0e",
    measurementId: "G-B2VZW0YJY0"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>
---------------------------------------------------------
instalo firebase en mi proyecto:

npm install --save firebase
-----------------------------------------------------------------------------------------
video 84 -- note about github 

In the upcoming lessons, we will be adding firebase to our React application. One thing to note is that we will be adding a config object that we get from firebase into our files, and in that config object is an API key. Typically it is good practice not to expose your API key publicly, but in the case of firebase, we have to do so because this is how firebase knows the application is ours! This is perfectly safe, and the intended purpose of this public API key. If you commit your code to Github, you may get a warning from GitGuardian having caught a google key, but GitGuardian has acknowledged that this is not an issue here!

https://twitter.com/search?q=firebase%20api%20key%20gitguardian&src=typd

How we secure our data is actually done with security rules in the firebase dashboard, but we will cover that in a later lesson! So please continue the course without worry :)

---------------------------------------------------------------------------------
video 85 -- google sign in authentication 

https://firebase.google.com/docs/reference/js/

creamos carpeta firebase 
y firebase.utils.js 
comenta que al importar 
import firebase from 'firebase/app'
import 'firebase/firestore'
import 'firebase/auth'

necesito importar firebase como base pero como es muy grande luego tomo solo lo que necesito, en este  caso firestore y auth 

cuando termina de editar firebase.utils.js 
necesito decirle a google me permita usar google auth 
volvemos a firebase 
Develop/authentication --> set-up-sign-in method 
--habilito google 
project-732625627403
--seleccione email 
maildecali@gmail.com
----------------------
luego vamos a sign-in.component y agrego 
import {signInWithGoogle} from '../../firebase/firebase.utils'
y
<CustomButton onClick={signInWithGoogle}>
Sign In with Google
</CustomButton>
----------------------------------------------------------------------------------------
video 86 -- cloning from this point on 

An important thing to note about any GitHub links that you fork and clone from this point forward is that you must replace the config  in firebase.utils.js  with your own config object in the firebase project overview that we learned in the last lesson. The config object is how firebase knows that your application is connected to your firebase account and database!
-------------------------------------------------------------------------------------
video 87 -- signin with google II 

necesito que mi app sepa cuando alguien se ha logeado con exito 
en App.js 
import {auth} from './firebase/firebase.utils'
y convertimos functional component en class component 
function App() { ahora va a ser 
class App extends React.Component {
  gracias a esto tenemos ahora acceso al estado.

  comenta que con firebase obtenemos user authentication session persistance 

  vemos en app como modifica para ver el estado y chequear si esta logeado o no 

-------------------------------------------------------------------------------------
video 84 -- how to fix 403 - restricted_client error 

It's possible you may encounter a google Authorization error that says 403:restricted_client. 
If you do, here are the instructions to fix it!

There should be a Learn More link in the popup, clicking that should take you to the Google APIs console that has three tabs under the header named Credentials, OAuth Consent Screen, and Domain Verification. 
Go to the OAuth Consent Screen tab and update the Application Name to 
"crwn-clothing" or any other name you're comfortable with 
(i.e. the name of your project). 
Click on save at the bottom, then try logging into your verified Google account thereafter.

Thanks to Dylan Flohrschutz for the instructions and solution!

-------------------------------------------------------------------------------------
video   89 -- google authentication III 

https://www.w3schools.com/cssref/css3_pr_box-sizing.asp

vemos que cuando el usuario esta logeado tenemos que darle opcion de salir 
debemos agregar sign out en el nav 
para saber el estado agrega a <Header>
 <Header currentUser={this.state.currentUser} />
 luego en header.component 
 importo auth y en el componente agrega
  {currentUser 
        ? 
        <div className='option' onClick={() => auth.signOut()}>Sign Out </div> 
        : 
        <Link className='option' to='/signin'>Sign In</Link>}
  es decir si esta logeado le da el boton de logout sino tiene el de signin 

luego en el custom button 
agrego prop isGoogleSignIn 
 <button className={`${isGoogleSignIn ? 'google-sign-in' : ''} custom-button`}

------------
git status 
git add - A 
git commit -m "integrated firebase and google auth" 
git push origin master 

--------------------------------------------------------------------------------------
video 90 -- firebase firestore  !! debo usar cloud Firestore (antes database)

necesito ademas chequear si existe un usuario cuando quiere ingresar con su email/passw 
tenemos que entender como funciona firestore 

Develop/database --> create database (start in test mode)
se trata de nosql database (como mongodb) por eso en lugar de tablas usamos 
collections 
ej collection user 
firestore.collection(users).doc('id9949310342')
o sea de la tabla users el usuario con ese id 
otra forma 
firestore.doc('/users/id99..')

-----------------------------------
##########################
use primero realtime firestore y me da error no puedo seguir el curso 

error de firestore ?? hubo actualizaciones de google ahora en lugar de database en el sidebar veo realtime database o 
cloud firestore 
comenta usar modo nativo:
https://stackoverflow.com/a/51850105/5338829

usando modo nativo:
https://console.cloud.google.com/firestore/data?project=api-project-1034170227934

asi que ahora intento con cloud firestore:
parece que ahora si puedo!! 
creo users (collection)
field:displayName 
valor: cali
---
ahora si veo puedo agregar una colleccion dentro de users...
en el ej agrega cartItems 

para usarlo crea test.js 
import firebase from 'firebase/app'
import 'firebase/firestore'
const firestore = firestore.firestore();

firestore.collection('users').doc('9FSA1cXXu22FSfpDZiw7')
otra forma
firestore.doc('/users/9FSA1cXXu22FSfpDZiw7/')

-----------------------------------------------------------------------------------
video 91 -- async await 
go to Appendix 1: Key Developer Concepts at the bottom of the course video player, and watch the video titled Async Await first before the next lesson.
-------------------------------------------------------------------------------------
video 92 -- storing user data in firebase 

comenta que para trabajar con firestore hay reglas 
deja un firebase.pdf 

agrerga export const createUserProfileDocument  en firebase.utils.js 

luego lo importo en app y usa
createUserProfileDocument(user) para ver que devuelve id, path aun cuando se que no existe porque le pase un id falso.. 
comenta que esto siempre va a devolvernos un objeto 
en el pdf lo explica 
le decimos a firebase que guarde o que nos de de la base de datos 
documentRef object para crud operations 
set()
get() -- we get snapshot object 
update()
delete()
---------------------
 const userRef = firestore.doc('users/1242423')
    //para obtener el snapshot oj 
    const snapShot = await userRef.get()
con esto vemos devuelve prop exists false/true 

snapShot representa la data 
pero si quiero guardar data necesito usar documentRef !!
---------------------------------------------------------------------------------------
video 93 -- Note: Firestore update regarding permissions 

There has been a recent update in Firebase's database for new users where by default, there is a permission rule that disables reading from the database after 30 days! If this is not changed, some of you may start to see an error in your application saying FirebaseError: Missing or insufficient permissions.

This can be quickly fixed by navigating to the rules tab in the database of your firestore console.

You will land on this page, which manages the permissions for your database. We will cover this section in greater depth later in the course.

The text you can edit, and the part to focus on is line 4 and 5:

If you do not see request.time < timestamp.date(year, month, day); on line 5, you don't need to worry about this. If you do, just remove it, and replace the : if with a ; on line 4.

Your final result should look like:
With that you should be good to continue on!
---------------------------------------------------------------------------------
video 94 -- Storing user data in our app 
in previous video we store the user data in our database but now we have to store that data in the 'state', of our app so we can use it in our app!

por eso modificamos el componentDidMount 
componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async user => {
      createUserProfileDocument(user)
      //this.setState({ currentUser: user })
     // console.log(user)
    })
    ahora 
     componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {
      if(userAuth) {
        const userRef = await createUserProfileDocument(userAuth)
        userRef.onSnapshot(snapShot => {
         // console.log(snapShot.data)
         this.setState({
           currentUser: {
             id: snapShot.id,
             ...snapShot.data()
           }
         }, () => {
           //comenta no puedo pasarlo fuera del setState asi que lo paso como segundo parametro (video 94)
             console.log(this.state)
         })
        })
        
      } else {
        //en caso de no estar logeado pasa a ser null 
        this.setState({currentUser: userAuth})
      }
  
    })
  }

  luego quito el console log this.state 
  -------------------------------------------------------------------------------------
video 95 -- sign up component 
creo sign-up/sign-up.component.jsx 
y styles.scss 
-------
pregunta: 
how do [ ] brackets work when you call this.setState
this.setState({ [name]: value });
resp: this is just a way to handle every form input change with just 1 handler method.

ver mas:
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics

------
pregunta: How do you make the symbol != it shows up something like this =/= but I do != and doesnt shows up

resp: In section 3 Lesson 16 you will find Yihua's exact font he is using.
 Aside from that in VS code go into  settings --> text editor --> font. 
 Here you will find a setting called Font Ligatures. 
 Make sure that is enabled. 
 Font ligatures are what is changing the !== to =/=
------
 pregunta: The componentDidMount is load only once during compoent lifecyle in App.js then how it is able to change state every time when we signin and signout.??

 resp: The componentDidMount function is called only once but when it executes, it registers an event listener onAuthStateChanged provided to us by firebase auth object.

Whenever the user authentication state is changed, i.e., whenever a user signs-in or signs-out, onAuthStateChanged method invokes the function passed as a param to it.

In our case, this method is invoked by onAuthStateChanged.
----------------------------------------------------------------------------------------
video 96 -- Sign Up with email and password 

en sign-in-and-sign-up.component.jsx agrego component sign up 
agrega estilos a sign-in-and-sign-up 

luego en App.js agrego console.log(this.state)

recordar tener habilitada la Authorization en Firebase para email sign in ! ademas de la de google sig in 

git status 
git add -A 
git commit -m "store authenticated user in db firestore" 
git push origin master 

----------------------------------------------------------------------------------------
video 97 -- Sign Up with email and password 

en sign-in.component importo auth 
ahora en handleSubmit 
handleSubmit = event => {
  la convertimos en async 

  --------------------------------------------------------------------------------------
  video 98 --note on our custom button 
One quick note due to the frequency of this question popping up! If you see that your sign in with google button causes the email and password fields to trigger asking the user to fill these in, simply add the property type="button" to our google sign in button! The reason this happens is because any buttons inside of a form element will cause the form to treat the button as type="submit" by default. We don't want that for our google sign in button though, so just make sure to add type="button" to our google sign in CustomButton.

Your code might look like:
<CustomButton type="button" onClick={signInWithGoogle} isGoogleSignIn>
  Sign in with Google
</CustomButton>

---
pregenta:
usar constructor y super? 
resp:
They discussed this somewhere in the thrid chapter. It's sytacitc sugar added by Babel/Webpack, so you don't need to type out the constructor, just for initializing the state.
Be aware: When you need props, this does not work.

About super: take a look here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Sub_classing_with_extends
If you extend a class and write a constructor, you need to call super. If you leave out the constructor, it just uses the parent constructor.
-------------

pregunto yo: 26/08/2020
no se como chequear si existe snapshot 
ya que eso evitaria error currenUser Null cuando hago logout en el login ...

resp yo: if(!snapShot.exists) { habia escrito exist en lugar de exists !!
------------------------------------------------------------------------------------------------
Quiz: 
Let's take a quiz to remember the fundamental pattern we must follow if
 we use the onAuthStateChanged() or onSnapshot() methods!

 1) Whenever we call the onAuthStateChanged() or onSnapshot() methods 
 from our auth  library or referenceObject, we get back a function that lets us 
 unsubscribe from the listener we just instantiated. 
 Which lifecycle method should we use to call that unsubscribe method in?

resp: componentWillUnmount 
Calling the unsubscribe function when the component is about to unmount is the best way
 to make sure we don't get any memory leaks in our application related to listeners 
 still being open even if the component that cares about the listener 
 is no longer on the page.
 ----------------------------------------------------------------------------------------------
 --------------------------------Section 8 ----------------------------------------------------
 ----------------------- Redux 1 --------------------------------------------------------------
 video 100 -- overview 

 comenta lo usamos (a redux) como state managment 
redux lo hace facil de debug 
-----------------------------------------------------------------------------------------------
video 101 -- intro 

redux propone eliminar states y usar props que los pasamos a traves de los componentes 
y el state lo guarda en el store ( un objeto mayor)

-----------------------------------------------------------------------------------------------
video 102 -- redux concepts 
1-cuando nuestra app crece conviene usar redux 
2- useful to share data between components
normalmente con react debo subir hacia el padre para poder compartir (one data flow)
3-predictable state managment using 3 principles:
1)single source of true (one big object that describes the entiry state of the app ROOT REDUCER)
2)state is read only
3)changes using pure functions 

nuevo vocabulario con redux:
-action (algo que el usuario hace , click button )
-root reducer (es una funcion recibe un input y da output que influye en el store )
-store (aca se actualiza el state)
-dom changes 
----------------------
redux is for global state management!

redux usa flux pattern 
action -> dispatcher -> store -> view 

comenta que flux reemplaza al modelo MVC 
comenta que con redux ahora no necesitamos en react this.state 
sin embargo aclara que No todos los states  
lo importante se guarda en redux store pero otros como por ej form input mantienen sus this.state 

###########
lecture 102, currentUser is converted to redux state and we set it in App.js, which mean it is kind of globally accessible state now, what lesson 103 does is just read that state from redux

----------------------------------------------------------------------------------------------------
video 103 -- redux in our app 

comenta que con redux los componentes mediante las acciones actualizan el reduce state de diferentes componentes y estos actualizan solo un slice del state y entre todos estos slices van a modificar el Root State principal o de mi app. Luego desde aca se pasan como props a los componentes .

comenta que redux puede usarse en varios frameworks, no solo en react!
----------------------------------------------------------------------------------------------------------
video 104 -- redux actions and reducers 

los reducers son funciones que tienen dos parametros state anterior (currentState) y action y en base a esa accion determina si debe renderizarse y obtener un nuevo objeto o no .

pregunta: After mapStateToProps compares the previous state with the new one, and let's suppose that they're different. When the Virtual DOM comes in play? I mean the state changes, then the Virtual DOM is updated, compared tho the DOM and then updates the parts that are different? 

resp:
https://programmingwithmosh.com/react/react-virtual-dom-explained/
----------------------------------------------------------------------------------------------
video 105 -- settin up redux I 
react redux 
https://www.npmjs.com/package/react-redux

npm install react-redux
------------------
redux 
https://www.npmjs.com/package/redux

npm install --save redux
------------
redux logger 
https://www.npmjs.com/package/redux-logger

npm i --save redux-logger
-----------------
luego de instalar vamos a index.js 
los agregamos para poder acceder no solo al store sino a los reducers 
import { Provider } from 'react-redux' 
Provider es un componente de react-redux y este debe envolver a nuestra app 
al ser el padre de todos los componentes va a acceder al store 

redux flow vemos agrega Middleware 
action -> Middleware -> dispatcher -> store -> view 

creamos folder redux 
root-reducer.js 
folder user y user-reducer.js 

pregunta: 
What is 'SET_CURRENT_USER' exactly? 

resp: redux checks if the type of action matches the case and if matched returns the new state, with it you know what action type caused the state change

-------------
pregunta:
1. We set the case as 'SET_CURRENT_USER' in the switch statement. Is SET_CURRENT_USER user-defined for our app or it's something built-in to Redux? Can I change it with some other string?

2. We return currentUser with action.payload. I didn't understand this statement. What does action.payload means and what it does here?

resp:
1. 'SET_CURRENT_USER' is not something built into Redux and yes you can change it to some other string. You eventually will move your action types into a consts file.

I find it helpful to consider it a "command" that you defined. When that part of the code executes, it sends off the 'SET_CURRENT_USER' command (we call these actions). That action is absorbed by the reducer that contains your switch statement and then actually modifies state.



So, you might define an action like this in your action file

export const loginUser = (loginStuff) => ({
   type: LOGIN_USER
   payload: loginStuff
});

From your login button, you'd call that action. 
Then that action is sent to your reducers file that has your switch statement. It checks the type and matches on the LOGIN_USER command.

It then reads the payload (in the example above, loginStuff might be stuff like a username and password) and then executes some code to modify the state. 



2. action.payload is just the data that was sent along in the original action. So in that example, the currentUser was sent in the payload. The reducer grabs the payload (userStuff) and does something with it (like set the current user to the state)
-------------------------------
pregunta: cuando usar destructuring (pero se equivoca porque no era destructing)
resp:
const a = 1
abc({ a })
is equivalent to
const b = {a:1}
abc({...b})
you are not destructuring, you are creating an object literal, you can understand this as structuring, because it can be destructure later

destructuring only happen when

1. before =  operator

const {a,b,c,}=abc
2. when naming parameter

const efg = ({e,f,g}) =>{}

do not confuse this with function invoking abc({ a })
------------------------------------

comenta que el root reducer es un json y el key en este primer ej es user 

---------------------------------------------------------------------------------------
video 106 -- setting up redux II 

necesitamos crear el store 
dentro de redux creo store.js 

comenta 
const middlewares = [logger]

const store = create.store(rootReducer, applyMiddleware(...middlewares))
de esta manera en applyMiddleware obtenemos todo mediante spread todas las funciones y valores del array logger 
tambien puede funcionar sin middlewares 
const store = create.store(rootReducer, applyMiddleware(looger))

importamos el store en index.js 
y gracias a 
 <Provider store={store}> ahora podemos pasar props a nuestros components o extraer de estos 

 --
 necesito crear la funcion action que va a cambiar el reducer ..
creo user/user.actions.js

 type: 'SET_CURRENT_USER', comenta que como no va a cambiar su valor usamos mayusculas/capital 
-----------------------------------------------------------------------------------
video 107 -- connect() and mapStateToProps

https://react-redux.js.org/api/connect

necesitamos el valor de currenUser en el header component que hasta el momento lo viene tomando desde el app.js 
importo connect en el header component 
import { connect } from 'react-redux'
comenta connect is a high order component que es una funcion que  tiene como argumento otros componentes y retorna otro subcomponent 

cambiamos export default Header; por 
const mapStateToProps = (state) => ({
    currentUser: state.user.currentUser
})
export default connect(mapStateToProps)(Header);

y con esto ahora podemos cambiar en App.js 
<Header currentUser={this.state.currentUser} />
ahora 
<Header />
-------------------------------------------------------------------------------------
video 108 -- mapDispatchToProps 

debemos cambiar app.js agregando connect 

const mapDispatchProps = (dispatch) => ({
  setCurrentUser: user => dispatch(setCurrentUser(user))
})
export default connect(null, mapDispatchProps)(App);

y con esto quitamos el constructor del app.js
 constructor() {
    super() 
    this.state = {
      // currentUser : null // ahora lo coloco en user-reducer
    }
  }
  ----------------------------
  y en el snapShot cambio el setState 
// console.log(snapShot.data)
  this.setState({
    currentUser: {
      id: snapShot.id,
      ...snapShot.data()
    }
  })
  -------------------
  ahora 
  const {setCurrentUser} = this.props
setCurrentUser({
      id: snapShot.id,
      ...snapShot.data()
  })
-----------------------
  cambio tambien 
  <Header currentUser={this.state.currentUser} />
  por <Header />


pregunto:
al hacer sign in no cambia en el menu deberia mostrar sign out ...
pregunte sobre la pregunta de otro y lo mandaban a instalar componente para debug...

---------------------------------------------------------------------------------------
video 109 -- user redirect and user action type 

https://reactrouter.com/web/api/Redirect

debemos setear que si existe usuario no aparezca la pagina  de sign up 
agrego en app redirect 
cambio 
<Route exact path='/signin' component={SignInAndSignUpPage} />
por 
 <Route exact path='/signin' render={() => this.props.currentUser ? 
  (<Redirect to='/' />) : 
  (<SignInAndSignUpPage />)} />
------------------
creamos user.types 

--------------------------------------------------------------------
video 110 -- cart component 
copio shopping-bag.svg 
creo cart-icon
-------------------------------------------------------------
video 111 -- cart dropdown
creo cart-dropdown 
-------------------------------------------------------------
video 112 -- implementing redux in Cart 

comenta que la funcionalidad de ocultar/mostrar la hace global por si quiere usarlo en otro lugar y no solo en  el header 

en redux creo cart 
y cart.actions.js |cart.reducer.js | cart.types.js 

pregunta: why don't we import root reducer into header component?
At the bottom of the header component we have our mapsStateToProps function, which takes in user and cart as arguments, which are both referencing the state in the root reducer. However I am confused on how it is retrieving that information if we don't import root reducer into the header component file.

resp: 
We put all of our reducers into 1 root reducer and then from there we can call the state using connect HOC.
----------
####################
The result of the functions mapStateToProps and mapDispatchToProps allow us access to "props" and that is why we are able to destructure actions or slices of the state in our connected components?

For instance, with the CartIcon component we use mapDispatchToProps to create an object that has the key toggleCartHidden, this becomes accessible to the component after calling

connect(null, mapDispatchToProps)(CartIcon)

and now the CartIcon component has props passed down to it and that is how we destructured toggleCartHidden and added it to an onClick event.

The beauty of this is we no longer have to directly pass down props from a parent component, but we still get access to the props we need by using Redux. Is my understanding correct?

resp: Yes, that is correct. Rather than passing down props from the parent (potentially many, many levels), you are getting those as props from the Redux store via the connect function.
###
mapStateToProp as the name suggested map the state in store to component props
###
mapDispatchToProps map the dispatch (you can understand it as setState) in store to component props

###########
en cart.actions:
comenta que payload es optional property in actional object 
###############
ej destructering varios ..
const mapStateToProps = ({user: {currentUser}, cart: {hidden} }
----
 {hidden ? null : <CartDropdown />}
 si esta oculto == null sino despliego CartDropdown

 ----
 pregunta: no entiendo mapStateToProps 
 resp:
 In mapStateToProps, we specify the parts of the state that we want to retrieve from the Redux Store.

We then pass mapStateToProps as the first argument of the connect() HOC.

connect() provides the connection between our React component & the Redux Store; so that we can access state from the Redux Store within our React component.

With our component connected to the store, we can pass the state (retrieved from the Redux Store) into our connected React component via props.
---------------------------------------------------------------
video 113 -- add to cart styling 
en  CustomButton 

----------------------------------------------------------
video 114 -- cart item reducer 

redux actions 
necesito agregar las propiedades que quiero guardar en el reducer 
agrego en cart.reducer en el initial state 
cartItems: []

queremos agregar el item cuando el usuario da click 
agrego  case CartActionTypes.ADD_ITEM: 
que devuelve un objeto 
...state.cartItems son los items ya existentes y
con action.payload agregamos los nuevos 

-----
en collection-item.component 
addItem: item => dispatch(addItem(item))
este addItem viene de cart.actions.js 
addItem recibe el item como propiedad del addItem que viene del cart.actions luego dispatch al store 
-------------------------------------------------------------
video 115 -- adding multiple items to cart 
descargo shop.data.js comenta que no deben repetirse los id!!
--
utility functions allow us to keep our files clean and organize
functions that we may need in multiple files in on location.
--
en redux/cart creo cart.utils.js 
---
cartItem.find() retorna el primer valor del array basandose en la condicion que pasemos dentro .
--
cartItem.find(cartItem => cartItem.id === cartItemToAdd.id )
si coinciden lo devuelve sino da undefined 
------------
git status 
git add -A 
git commit -m"
git push origin master 
------------------------------------------------------------
video 116 -- optional find 

If you are new to the concept of using the find() function we saw in the previous video and you would like to learn more, we created a bonus video to explain the function in more detail. Simply go to Appendix 1: Key Developer Concepts at the bottom of the course video player, and watch the video on the find() method.
-------------------------------------------------------------
video 117 -- cart item component 
creo cart-item 
y cart-item.component 
luego lo importo en cart-dropdown 
-----------------
pregunta: We are consuming our data from a file and in real life scenarios that will not be the case it will be from a Rest-Api then how are we going to connect it to our redux and everything?
resp: 
later on in the course you will learn how to use firebase.

pregunta:
I feel that all these de-structuring is making it difficult to understand, please also include the non refactored versions of the code in the lectures.
resp:
it would look like this always using props to get access and you :
const Directory = props =>(     <div className='directory-menu'>         {         props.sections.map(({id, ...otherSectionProps }) => (             <MenuItem key= {id} {...otherSectionProps} />         ))         }     </div>

look how beautiful destructuring can be:

const CartItem = ({item: {imageUrl, price, name, quantity}}) => (

    <div className='cart-item'>

        <img src={imageUrl} alt= 'item'/>

        <div className='item-details'>

            <span className='name'>{name}</span>

            <span className='price'>{quantity} x  {price} €</span>
        </div>
    </div>

)
-------------------
pregunta: nice scrollbar?
resp: agregue codigo en cart-dropdown.styles 
pero parece solo sirve para chrome.. 

ver problema en mac 
https://stackoverflow.com/questions/46734299/macs-not-reliably-displaying-horizontal-scroll-bars

---------------------------------------------------------
video 118 -- optional reduce()

If you are new to the concept of using the reduce() function which we will see in the next video, and you would like to learn more, we created a bonus video to explain the function in more detail. Simply go to Appendix 1: Key Developer Concepts at the bottom of the course video player, and watch the video on the reduce() method.
------------------------------------------------------------
video 119 -- selectors in redux 

https://www.npmjs.com/package/reselect

npm install reselect

para usar memoization se usa la libreria reselect 

queremos que dentro del icono de cart aparezca el numero total de items que se van agregando 
en cart-icon.component.jsx 

escribimos lo que llama un selector :
const mapStateToProps = ({cart: {cartItems}}) => ({
     itemCount: cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity +cartItem.quantity , 0)
 })

 comenta escribimos codigo que contiene un state pero que va a hacer un push de una porcion(slide) de ese state

 el problema de este aproch es que esta renderizando a cada instante cada vez que agregamos items 
 cada vez que reduce es llamado genera un nuevo objeto y esto es malo para performance por eso usamos la libreria memoization y vamos a cambiar ese mapStateToProps 
-----------------------------------------------------------
video 120 -- optional memoization

In the next videos, we are going to use reselect which as we mentioned in the previous video, will allow us to memoize and not re-render a component if the state value does not change. If you want to learn more about Memoization and how it works with JavaScript, simply go to Appendix 1: Key Developer Concepts at the bottom of the course video player, and watch the video titled Memoization from my Master the Coding Interview: Data Structures + Algorithms course which I have included for you.

articulo sobre memoization:
https://blog.cloudboost.io/reselect-source-code-seeing-closure-and-memoization-in-practice-8d12139cb756

articulo sobre closures js: 
https://medium.com/madhash/understanding-closures-in-javascript-in-3-minutes-557ebb8a215b

Writing closures is more than just the act of putting a function inside another function. It is the technique used to create variables that are protected against external change, truly isolated from the rest of the application and are persistently stateful.
-------------------------------------------------------------
121 -- reselect library 
instalo la libreria con 
npm install reselect

creo dentro de cart 
cart.selectors.js 

luego importa en cart-icons 

luego remplaza en cart-dropdown.component

pregunta: comenta que esta leccion lleva a malosentendidos 
resp:

Here with reselect we want to prevent our cart-icon component from re-rendering if our redux state changes with values that are unrelated to which pieces of the state our cart-icon cares about. In this case the cart items. Our cart-icon component re-renders whenever new props get passed to it. In the case before we added reselect, whenever our currentUser changes from signing in and signing out, we would end up with a brand new object for our redux store because redux always builds a new object when any prop on it changes. This means that mapStateToProps in cart-icon component re-runs and will rerun our reduce function giving our cart icon a new prop, even if it has the same value as before the currentUser changed. With reselect we are memoizing the value of each selector that calls createSelector, as long as the value parameters passed in haven't changed, then our selector won't re-compute and just returned the previously memoized value. Therefore when we move our cartItemCount reduce function into a selector, which itself relies on the selectCartItems selector, both of these selector functions won't run as long as Cart or CartItems in our redux store haven't changed. As a result, in our CartIcon component, the mapStateToProps still gets fired on every state change in redux, but they won't pass new props into our CartIcon component which means it doesn't re-render.

Are we maybe talking about the same thing just that I'm unclear in the video leading students to believe that I'm saying by using selectors our component won't re-render ever?

-----------------------------------------------------------
video 122 -- correction on cart-icon re rendering 

I made one mistake in explaining our CartIcon component and the itemCount! Due to itemCount being a primitive (integer), redux will do a shallow equality check under the hood between state changes in mapStateToProps. 

In this case having a selector does not save us on any re-renders of the CartIcon component. If our overall state changes but the itemCount value stays the same between these changes,  redux's shallow equality check will see that itemCount is the same value as last time and save us a re-render. 

It's still valuable to keep the logic for the reduce in a selector though because we do still want to memoize the calculation of itemCount (our reduce logic), and without a selector our reduce logic would still be running on every state change regardless of the final calculated value of itemCount.

The take away here is that redux's mapStateToProps has a shallow equality check for every value in the object; 
it won't replace values if they pass a shallow equality check which means it won't needlessly re-render, but if we have transformation logic it's still valuable to memoize it with a selector to save us running duplicate logic to get the same output.

comentarios:
how to compare objects in JS ?
https://dmitripavlutin.com/how-to-compare-objects-in-javascript/


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
-------------------------------------------------------------
video 123 -- user selectors 

creamos dentro de redux user 
user.selectors.js 

agregamos en cart.selectors:
export const selectCartHidden = createSelector(
    [selectCart],
    cart => cart.hidden
)
----------------------------------------
en header.component. 
importamos 
import {createStructuredSelector} from 'reselect'
y 
import { selectCurrentUser } from '../../redux/user/user.selectors'

luego cambio
const mapStateToProps = ({user: {currentUser}, cart: {hidden} }) => ({
    //currentUser: state.user.currentUser
    currentUser,
por: 
const mapStateToProps = createStructuredSelector({
    currentUser: selectCurrentUser,
    hidden: selectCartHidden
})

luego en App.js 
import { createStructuredSelector } from 'reselect'
import { selectCurrentUser } from './redux/user/user.selectors'

//video 109
const mapStateToProps = ({ user }) => ({
  currentUser: user.currentUser
});

cambio por: 
const mapStateToProps = createStructuredSelector => ({
  currentUser: selectCurrentUser
});
comenta usar selectCurrentUser en otros componentes como 
dropdown.component 
cambio 
// const mapStateToProps = ({cart: {cartItems}}) => ({
//     cartItems
// }) ahora con cart.selectors 
const mapStateToProps = state => ({
    cartItems: selectCartItems(state)
})
ahora con selectCurrentUser 
const mapStateToProps = createStructuredSelector ({
    cartItems: selectCartItems
})
-----------
cambio tambien en cart-icon 
// const mapStateToProps = ({cart: {cartItems}}) => ({
//     itemCount: cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity +cartItem.quantity , 0)
// })
const mapStateToProps = state => ({
    itemCount: selectCartItemsCount(state)
})
ahora 
const mapStateToProps = createStructuredSelector ({
    itemCount: selectCartItemsCount
})
----------------------------------------------------------
video 124 -- checkout page I

modificamos cart-dropdown.component 

coercion en JS ! 
"1" == 1 da true compara valores 
"1" === 1 da false porque ademas de comparar el valor compara ademas el tipo, type en este caso string es diferente a numero!

-------------
creamos checkout page 
en pages/checkout creo checkout.component.jsx
luego lo importo en App.js 
luego uso en cart-dropdown.component history push para dirigirlo a checkout page 
-----------------------------------------------------------
video 125 -- checkout page II

en cart.selectors creo selectCartTotal 

pregunta: why don't we do the reduce() in the component instead of in selector?
resp: We use the reduce() method in a selector because we want to keep the logic and the math behind all that separate from the component itself. 
We try to keep the UI rendering part to the React.Component and as we are using redux, which is the data layer, we try and keep the logic and math related to the data stored in state in those files. Hence, we keep the reduce() method in the selectors separate from the React UI Components.
--
 like: 
Memoization which imporves performance by only rendering states only when a change occurs.
And also the ability to reuse and pass these selectors to other components.

articulo sobre selectors:
https://medium.com/@pearlmcphee/selectors-react-redux-reselect-9ab984688dd4
------------------------------------------------------------
video 126 -- extensible code 

video 127 -- dispatch action shorthand

queremos que al redireccionar el dropdown vuelva a estar hidden 
-----------------------------------------------------------
video 128 -- checkout item component 

con escribir el codigo podemos renderizar algunos iconos!
https://www.w3schools.com/charsets/ref_utf_dingbats.asp

ej &#10004; muestra un check marcado 
o el &#10005; devuelve X
creo checkout-item 

----------------------------------------------------------
video 129 -- remove item from cart 

necesito crear funcionalidad del boton de remover X 

agrego en cart.types.js 
  CLEAR_ITEM_FROM_CART: 'CLEAR_ITEM_FROM_CART'
  luego en cart.actions.js 

export const clearItemFromCart = item => ({
    type: CartActionTypes.CLEAR_ITEM_FROM_CART,
    payload: item
})
luego debo actualizar el reducer ya que este va a ser el que remueva el item del array 
en cart.reducer 
agrego otro case 
cartItems: state.cartItems.filter(
cartItem => cartItem.id !== action.payload.id )
aca estoy diciendo que si el id del item no coincide con el del array lo deje, es decir no lo borra 

luego en checkout-item.component 
------------------------------------------------------------
video 130 -- remove items at checkout 

en la pag checkout tengo < 4 > es decir que con < debe poder quitar y con > poder sumar...

en checkout-item.component 
<span className='quantity'>
  <div className='arrow' >&#10094;</div>
      <span className='value'>{quantity}</span>
  <div className='arrow' >&#10095;</div>
  </span>
-----------
en cart.types agrego nueva accion 
export const removeItem = item => ({
    type: CartActionTypes.REMOVE_ITEM,
    payload: item
})
luego en el cart.reducer 
agrego un case para remove pero ademas necesito agregar en cart.utils el removeItemFromCart

luego agrego en checkout-item 

git status 
git add -A 
git commit -m "add add/remove functionality to checkout-item"
git push origin master 
--------------------------------------------------------------
---------------------Section 9 -------------------------------
---------------Session storage and persistance ---------------
video 131 -- local storage and persistance 

window localstorage:
https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage

window sessionstorage:
https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage

---la diferencia es que en 
sessionstorage persiste si hace un refresh de la pagina pero no si cierra la pagina va a perder todo.
en tanto que en el  local storage mantiene aun cerrando el navegador cuando vuelve sigue en el mismo lugar.

----
comenta se puede lograr guardar la info con firebase en lugar de localstorage pero lo deja para mas adelante.

tambien con una libreria redux-persist 
es mas...redux persist en realidad maneja el localstorage 

en local storage tenemos 
getItem y setItem


pregunta: why data not persist?
if we store in a variable?
resp:
whenever the app refreshes, all the redux state gets erased and it goes back to the default state in the store.
--
in the cart reducer our initial state looks like this:

const INITIAL_STATE = { 
   hidden: true, 
   cartItems: [],
};

So that's the initial state the application knows of when the page is refreshed. In the future, redux persist is implemented though to persist the updated state.
--------------------------
localStorage has limit of 10mb 
-------------------------------------------------------------
video 132 -- redux persist 

nos permite manejar tanto el localstorage como la sessionstorage
permite que el navegador lo guarde en el cache 


https://www.npmjs.com/package/redux-persist

npm install redux-persist

luego el el store.js 
const persistor = persistStore(store) 
 
export default {store, persistor };

luego en root-reducer.js
import { persistReducer } from 'redux-persist'
y con 
import storage from 'redux-persist/lib/storage'
le digo que quiero usar redux persist como mi default localstorage 

const persistConfig = { 
    key: 'root',
    storage, 
    whitelist: ['cart']
}
comenta que solo quiero guardar el cart porque el user lo maneja firebase 

ahora en index.js 
import { PersistGate } from 'redux-persist/integration/react'

-----------------------------------------------------------
-------------------------Section 10 ----------------------
-----------------Redux II ----------------------------------
video 133 -- directory state into redux 

cambio directory.component.jsx
creo redux/directory 
y directory.reducer.js en donde coloco el array que tenia en shop.data.js 

comenta: conviene o no? tenerlo en redux?
parece hay beneficios..

actualiza root.reducer 
actualiza directory.component.jsx
quito 
class Directory extends React.Component {
 constructor() {
        super()
        this.state = {
         sections: [
                {
                    title: 'hats',
                    imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',
                    id: 1,
                    linkUrl: 'shop/hats'
                },
                {
                    title: 'jackets',
                    imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',
                    id: 2,
                    linkUrl: 'shop/jackets'
                },
                {
                    title: 'sneakers',
                    imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',
                    id: 3,
                    linkUrl: 'shop/sneakers'
                },
                {
                    title: 'womens',
                    imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',
                    size: 'large',
                    id: 4,
                    linkUrl: 'shop/womens'
                },
                {
                    title: 'mens',
                    imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',
                    size: 'large',
                    id: 5,
                    linkUrl: 'shop/mens'
                }
            ]
        }
        render() {
        return (
            <div className="directory-menu">
                {this.state.sections.map(({ id, ...otherSectionProps }) => (
                    <MenuItem key={id} {...otherSectionProps} />
                ))}
            </div>
        )
    }
 }
-----------------------------
y cambio por:
const Directory = () =>  {
  porque ya no necesito usar el state aca.

------------------------------------------------------------
video 134 -- collection state to redux 

quiero mover shop.data.js 
creo redux/shop y shop.reducer.js 
y shop.selectors.js 
movemos shop.data.js a esta carpeta

una vez creado el reducer lo importo en root reducer 
y modifico el shop.component.jsx 
quito 
class ShopPage extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            collections:  SHOP_DATA
        }
    }
    render() {
        const {collections} = this.state;
        return (
            <div className='shop-page'>
                {
                    collections.map(({id, ...otherCollectionsProps}) => (
                        <CollectionPreview key={id} {...otherCollectionsProps} /> 
                    ))
                }
            </div>
        )
    }
}
-------------------
ahora 
const ShopPage = ({collections}) => (
  -----

pregunta:
why using selectors?
resp:
The summary would be that it prevents the mapstatetoprops function from being triggered when unnecessary
--
to avoid the same computations while deriving the some data from a part of the state if there were no changes in that part of the state...

-------------------------------------------------------------
video 135 -- collection overview 

vamos a crear category 
comenta que hasta ahora tengo rutas a la pagina superior 
pero ahora necesito nested routes 

vamos a mover el collections.map del shop.component a un componente propio 
creo en components collections-overview 
y collections-overview.component.jsx 

-----------------------------------------------------------
-----------------------Section 11 -------------------------
-------------------Advanced routing ------------------------
video 136 -- nested routing in shop page 

comenta que route pasa como props match/location/history 

creamos en pages/category 
y category.component.jsx 
luego actualiza page/shop.component.jsx
------------------------------------------------------
video 137 -- improving naming of component 

comenta se equivoco y renombra a collection (en lugar de category)
renombramos la carpeta y files...
---------------------------------------------------------
video 138 -- collection routing and selector 
-----------------------------------------------------
video 139 -- memoizing selectCollection and collectionUrlParam 

----OJO hice esto y luego desinstale.... ver comentarios 

Memoizing selectCollection and collectionUrlParam
One quick addition, our selectCollection function we just wrote is not memoized due to collectionUrlParam being passed in from our collection component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCollection function. In this case collectionUrlParam is a dynamic argument meaning it can change, so to memoize selectCollection we actually have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize helper function by adding it our packages like so:

If using yarn:

yarn add lodash.memoize


If using npm:

npm install lodash.memoize


And to use it, we import our newly installed memoize helper function at the top of shop.selectors.jsx like so:

import memoize from 'lodash.memoize';
And just wrap our selectCollection function with memoize like so:

export const selectCollection = memoize((collectionUrlParam) =>
  createSelector(
    [selectCollections],
    (collections) => collections[collectionUrlParam]
  )
);

Memoize does the same idea of memoization as reselect does for our selectors, except this time we're memoizing the return of our function which returns our selector:

(collectionUrlParam) =>
  createSelector(
    [selectCollections],
    (collections) => collections[collectionUrlParam]
 )
By wrapping this function is memoize, we're saying that whenever this function gets called and receives collectionUrlParam, I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the same collectionUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just return the selector that's been stored.

----------------------------------------------------------
video 140 -- optional currying 
In the previous video, we saw the concept of currying being applied with our selector. If you want to learn more about currying and how it works with JavaScript, simply go to Appendix 1: Key Developer Concepts at the bottom of the course video player, and watch the video titled Currying from my Advanced JavaScript Concepts course which I have included for you.
-----------------------------------------------------------
---------------------------Section 12 ----------------------
--------------------State Normalization --------------------
video 141 -- data normalization + collection page 

en lugar de guardar data (list of elements) en un array lo hacemos en un objeto 
a esto lo llaman data normalization !

comenta que no conviene usar collections.find() 
porque en caso de tener mucha data va a tardar demasiado !!
por eso conviene usar la data en un objeto 

ahora convierto shop data en lugar de un array en un objeto {}
simplemente cambia [] por {}

-----------------------------------------------------------
video 142 -- optional hash tables vs arrays 

In the previous lesson we learned about Objects (Hash Table data structure) being better for searching for items than Array. 
This is a common computing optimization when talking about data structures. 
If you want to learn more about why this is, this is a great resource for you to use:

 https://www.kirupa.com/html5/hashtables_vs_arrays.htm

-------------------------------------------------------
video 143 -- data flow in our app 

-------------------------------------
video 144 -- thinking data flow 

--------------------------------------------------------------
----------------------Section 13 ------------------------------
------------Stripe payments I --------------------------------
video 145 -- intro 

stripe is a platform that allows us handle online payments 

para habilitar pagos necesitamos back end services (no lo cubre aca , lo vemos mas adelante )

https://stripe.com/

sign in free account !! 
info@webjcb.com
stripetaj....
---------------------------------------------------------
video 146 -- stripe integration 

https://www.npmjs.com/package/react-stripe-checkout

npm install react-stripe-checkout

developers tab/api keys 
usamos de momento solo el 
publishable key :
pk_test_51HMKoTHJvzpD2w2pczJCxd6lwAQBB4Xx3yPMYQ6ucQqNOxARBYiFmf8BJAecFrEIAoAvke6poY5gUBtlUzE74oUk00d3lk38aC

-----------------
creamos components/stripe-button 
stripe-button.component.jsx 

https://github.com/azmenak/react-stripe-checkout 
vemos opciones 

const priceForStripe = price * 100; es el valor en centavos que vamos a pasar a stripe 

luego lo importamos en checkout.component 

------------test datos tarjeta:
4242 4242 4242 4242 
cvc 123 
01/22 
------------
https://stripe.com/docs/testing#cards
-------------------
pregunta: porque no usar react own stripe component con 

https://stripe.com/docs/stripe-js/react ?

resp: esa es otra posibilidad 

---------------------------------------------------------
video 147 -- note about test credit cards for stripe 

As of January 2020, our test credit card date is now past 01/20 so you'll see an error using this date. Just change the test date to any date in the future from your current date! You can find more details about this at the link here for documentation on stripe's testing cards.
---------------------------------------------------------------
video 148 -- cloning from this point on 

From this point on, if you fork and clone any GitHub links for this course, 
you must remember to set the publishableKey  in 
stripe-button.component.jsx 
to your own publishable_key value in your stripe dashboard.

 This key allows stripe to know that requests from any stripe checkout components are connected to your stripe account!
  
  You can find the key under the Developers Tab, and then the API keys tab in the menu that opens!

-----------------------------------------------------------
video 149 -- touches + look ahead 

descargo favicon 
en index.html cambio el titulo 
al tener 
<link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
solo tengo que colocar el favicon en public

con esto comenta terminamos nuestra app !! 
falta deploy ..
css heroku apolo hooks!
comenta que con hooks casi no hace falta usar redux !
comenta que en los ultimos anos las companias han desarrollado react usando redux y por eso es necesario saber usarlo 

veremos firebase y finalaciones en backend en stripe
---
comenta podemos no usar heroku y hacer todo con firebase!

---to host front end, you can use firebase hosting

https://firebase.google.com/docs/hosting

---for backend you can use firebase cloud function

https://firebase.google.com/docs/functions

------------------
the buildpack is only for heroku, you dont need buildpack if you deploy on firebase 
---
for custom domian, please follow this guide

https://devcenter.heroku.com/articles/custom-domains

--------------------------
git status 
git add -A 
git commit -m "stripe integration, change favicon"
git push origin master 
---------------------------------------------------------------
---------------------------Section 14 -----------------------
---------------------Deploying to production ----------------
video 150 -- deploying to heroku 

Heroku 
https://www.heroku.com/

Heroku CLI 
https://devcenter.heroku.com/articles/heroku-cli

Heroku Buildpack 
https://github.com/mars/create-react-app-buildpack

Heroku nos provee una url donde alojar nuestra app 

Nos dan free amount of bandwidth que alcanza para por ej un portfolio o para test de nuestra app 

pasado cierto limite...? comenzas a pagar 

----------
mi cuenta en heroku: 
user cali
info@webjcb.com
Herokutaj...
----------------------------------
comenta que ademas de ingresar al dashboard de heroku podemos operar a traves del CLI que nos permite realizar el push de nuestra app.
https://devcenter.heroku.com/articles/heroku-cli

descargo para windows 
veo ya lo tenia instalado 
heroku/7.42.4 win32-x64 node-v12.16.2  !!!!

para usar el cli debo logearme:
heroku login  (en el terminal)
esto me abre el navegador en la pag de login 
me logeo y me sale mensaje:
You can close this page and return to your CLI. It should now be logged in.

ahora sigo desde el terminal! 
veo me sale
Logging in... done
Logged in as info@webjcb.com

primero debo crear proyecto 
y agregar buildpack que hace deploy de react como static website 

heroku create crwn-shopping --buildpack https://github.com/mars/create-react-app-buildpack.git 
me sale nombre already exists... cambio por 
heroku create crwn-cali --buildpack https://github.com/mars/create-react-app-buildpack.git 

comenta que con esto no tengo que correr npm run build por nuestra cuenta ya que con buildpack crea production 

luego 
git push heroku master 

vemos crea production deploy de nuestra app 
cuando termina el proceso nos da la url para acceder a la app 
en mi caso sale:
remote: Verifying deploy... done.
To https://git.heroku.com/crwn-cali.git
 * [new branch]      master -> master

pero ojo: la url correcta es:
https://crwn-cali.herokuapp.com/

si entro en la otra me da este error-->
error method not allowed 
-----
luego otro error al intentar logearme en
https://crwn-cali.herokuapp.com/

en consola se ve error...
Esto es porque firebase necesita saber que url tiene permitido dejar acceso a la app o base de datos ...
vamos a firebase  
authentication / sign-in-method 
agrego domain (abajo )
https://git.heroku.com/crwn-cali.git (agregue por error este)
agrego:
https://crwn-cali.herokuapp.com/
 
 (esta url la obtuve ingresando a mi dashboard y haciendo click en ir a la app )

 y ahora si!!!
 ----------------------
 cosas para arreglar:
 quitar los console.log....
 css responsive !!
 se ve mal en  mobile 

 no es compatible con iE si con edge 
 --------------------------------------------------------------
 video 151 -- resources: buildpack 

 You can learn more about the buildpack we used in the previous video by following the documentation here:
  https://github.com/mars/create-react-app-buildpack

-------------------------------------------------------------
video 152 -- linkin github with heroku 

If you would like to not manually deploy the the app like we have seen in the previous video every time, and you want the app to redeploy anytime you update MASTER in your github repository, then you can set that up through Heroku by following these steps: https://devcenter.heroku.com/articles/github-integration

However, since we will be working on the project in the next sections, we recommend that you do not do this so that as you code along, even if your website breaks, your current version of the website is still live on Heroku until you decide to redeploy next.
-------------------------------------------------------------
video 153 -- optional: git + heroku commands

If you are curious how the below command works, read on...

$ git push heroku master

There are always few other steps to execute: 
Installing Git and Heroku, 
creating a local Git repo, 
signing-up to heroku, 
log-in heroku via command-line, 
creating heroku handle to hosting point (explained in PART 2)

1. A local Git repository:

    $ git add .
    $ git commit -m "my first commit"
    Created initial commit 5df2d09: my first commit
     44 files changed, 8393 insertions(+), 0 deletions(-)
     create mode 100644 README
     create mode 100644 Procfile
     create mode 100644 app/controllers/source_file
    ...
2. Have sign-up(ed) for Heroku and logged-in via command-line:

$ heroku login // or you can do this online
Enter your Heroku credentials.
Email: user@example.com
Password:
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub


PART 2: but what does heroku and master indicate?

It is more of a Git question than Heroku - Heroku is a hosting platform, which depends on Git (Distributed Version Control System) for deployment.

The basic concept of 'push' is pushing some thing (file, app, ..) we have locally (in our working machine) to somewhere else, in this case to a remote repository (remote machine).

In Git before using 'push' we create a remote (handle) which acts as a reference to a remote repository (Complete URL), we do so using the following command:

$ git remote add <remote-name-of-our-choice> <URL-where-you-be-pushing-yourapp>

The basic structure of 'push' command is:

$ git push <remote-name> <branch>
So $ git push heroku master is actually pushing your code/app/file (from some local Git repo) to a remote repo 'heroku' .

wondering when this 'heroku' remote got created, it was added when you executed $ heroku create

$ heroku create
Creating stark-fog-398... done, stack is cedar
http://stark-fog-398.herokuapp.com/ | git@heroku.com:stark-fog-398.git
Git remote heroku added

Do notice the last line "Git remote heroku added".

to make it more clear, here's a Git command to check/output all the remotes: $ git remote -v will display something similar to the following

$ git remote -v
heroku     git@heroku.com:somerepo.git (fetch)
heroku     git@heroku.com:somerepo.git (push)
So we can assume that the following command was executed (implicitly) somewhere, when you did $ heroku create , hence creating the heroku remote to some heroku repo (url)*

$ git remote add heroku git@heroku.com:somerepo.git

----------------------------------------------------------
video 154 -- optimizing production build 

comenta no queremos mostrar nuestros logger messages en produccion 

recuerda lo tenemos instalado en store.js y funciona para mostrar en desarrollo 
el logger es un middlewares 
cambio en store.js 
const middlewares = [logger]
ahora 
const middlewares = []
if (process.env.NODE.ENV === 'development') {
    middlewares.push(logger)
}

git status
git add -A 
git commit -m "removed redux-logger from production build" 
git push heroku master 

comenta que al hacer el deploy en cuenta gratis compartimos un dyno 
y nos dan 500 minutes por mes para hacer cambios 
vemos en el dashboard en el icono de nuestra app si no lo usamos unas zzz significa que esta dormida... y cuando alguien hace click debe despertarla consumiendo unos segundos 

comenta que en caso de necesitar mas tiempo heroku da la posibilidad de ir al seteo de mi cuenta y si agregamos una tarjeta de credito nos da unos minutos mas...
--------------------------------------------------------------
-----------------------Section 15 ----------------------------
--------------------styled components ------------------------
video 155 -- css in js 

BEM Block | __Element | Modifier
http://getbem.com/
en general conviene seguir esto para evitar errores ej trabajo en conjunto y otro programador puede usar la misma clase y producir un error 

Con react muestra como escribe una const con un objeto con varios estilos css y luego los aplica a un componente...
const textStyles = {
  color:'red',
  fontSize: '24px'
}
luego en el componente:
<div style={textStyles}> Texto prueba</div>
---
si bien esto tambien es css en js 
 comenta no es lo ideal. Tiene problemas por ej para acceder al hover etc, es decir no soporta todos los selectors que podemos necesitar en un trabajo.

Propone usar libreria:

https://styled-components.com/

Pro es performance faster 
ademas encapsulamos el css a su componente 
---------------------------------------------------------------
video 156 -- styled-components 

npm install --save styled-components
luego importo en App.js 
import styled from 'styled-components'
luego para usarlo en el componente 
const Text = styled.div`
color:red;
font-size:24px;
`;
es decir puedo escribir css 
y ahora en lugar de usar el div uso 
<Text>texto de prueba</text>

si inspeccionamos en el navegador vemos escribe:
<div class="2342vdf">texto de prueba</div>
es decir genera un unico string para una clase 
por eso comenta never bleed nunca va a chocar con otra 

comenta que si bien hasta ahora teniamos en cada componente un estilo aplicado a este. cuando trabajamos en grupos puede generarse problemas al usar un mismo estilo 

tambien podemos si queremos usar props 
<Text isActive={true}>texto de prueba</Text>
agrega al estilo en la constante Text arriba el css para cuando esta activo:
ej
border: ${({isActive}) => isActive ? '2px solid red' : 'none' }

comenta que gracias a esto tenemos incluso mayor control del css en el componente 

--------------------------------------------------------------
video 157 -- styled-component in our app 

comienza cambiando el componente homepage
antes:
import './homepage.styles.scss'
const HomePage = () => (
    <div className="homepage">
        <Directory />
    </div>
);
ahora
import { HomePageContainer } from './homepage.styles'

vemos al inspeccionar que genera <div class="unico..."> 
---------------
luego hacemos lo mismo en header en donde es mas complicado 

cambio 
 <div className='header'>
 por 
 <HeaderContainer>

 quito de header.component 
 import './header.styles.scss'
 cambio por 
 import {HeaderContainer, LogoContainer, OptionDiv, OptionsContainer, OptionLink} from './header.styles'

 luego mas abajo 
 <div className='header'> pasa a ser <HeaderContainer>

 <Link to='/' className='logo-container'>
 por <LogoContainer to='/'>
 <div className='options'> por <OptionsContainer>
--------------------------------------------------------------
video 158 -- thinking about tradeoffs

--------------------------------------------------------------
video 159 -- styled-components in our app II 

comenta que puede usarse 
<OptionLink as='div' o 
<OptionLink as={componenteCualquiera}
la ventaja con esto es que no necesita importar Link en header.component 

----------------------------------------------------------------
video 160 -- styled-components in our app III

vamos al custom button component 
comenta que hay tres estados diferentes para el boton y el css 

creo custom-button.styles.jsx 
antes:
import './custom-button.styles.scss'

const CustomButton = ({children,isGoogleSignIn, inverted, ...otherProps}) => (
    <button className={`${inverted ? 'inverted' : ''} ${isGoogleSignIn ? 'google-sign-in' : ''} custom-button `} 
    {...otherProps}
    >
    {children}
    </button>
)
ahora:
import {CustomButtonContainer} from './custom-button.styles'

const CustomButton = ({children, ...props }) => (
    <CustomButtonContainer {...props}>
    {children}
    </CustomButtonContainer>
)
---------------------------------------------------------
video 161 -- exercise : styled-components 

This is an optional exercise that you don't need to complete to move on to the next section. As Yihua mentioned, you can try converting your entire app to style components and use the attached github repository as the answer file that we have provided for you. Good luck!

https://github.com/zhangmyihua/lesson-26-complete

-------------------------------------------------------------
---------------------------Section 16 -------------------------
--------------------Advanced redux and firebase ---------------
video 163 -- overview 

comenta hasta ahora trabajamos con shop.data.js 
en realidad debe tomarse de una base de datos 
------------------------------------------------------------------
video 164 -- quick note: firebase 

Over the next couple of videos we are going to be covering some specific Firebase commands. Keep in mind that as a React Developer, you do not need to memorize these things and most of the time you can always refer to the firebase documentation for more information. We decided to include the process in the course so that you get a clear picture into what  is involved in creating a full scale application.

If for some reason you get overwhelmed with Firestore, just keep going and use our provided code since this is not the "important" part of the course.

----------------------------------------------------------------------
video 165 -- Firebase refresher 

objetos en firebase:
podemos obtener mediante la consulta a una bd de firestore solo
1-queryReferences 
2-Snapshot

Puede tratarse de una collection o bien de un documento 
Si al hacer la consulta no existe nada, igual devuelve algo de esto.

1-queryReferences is an object that represents the current place in the db that we are querying.
ej:
firestore.doc('users/:userId');
firestore.collections('/users');

The queryReferences object doesn't have the actual data of the document or collection.
It has properties that tell us details about it, or the method to get the Snapshot object wich give us the data we are loking for.

---------------------
DocumentReference obj vs CollectionReference obj 

to perform CRUD (create, retrieve, update, delete) we use DocumentReference.

to add:
we can documents to collections using CollectionReference obj .add({value:prop})

to get: 
we get the Snapshot obj  from referenceObject using get( )

DocumentReference returns documentSnapshot obj.
CollectionReference returns a querySnapshot obj.

to check if exists:
we use documentSnapshot obj using .exists thar returns boolean .

to get properties of data:
we can call .data() method that returns json obj.

ej userAuth que es el obj de firebase que nos permite chequear si esta logeado.
para realizar la consulta 
const userRef = firestore.doc(`users/${userAuth: uid}`});
luego con get obtengo el snapShot 
const Snapshot = userRef.get();
para crear nuevo obj:
userRef.set({
  displayName,
  email,
  etc
})

----------------------------------------------------------------------
video 166 -- Firebase refresher II

querySnapshot from CollectionReference obj 
.empty returns boolean 
To get all:
.docs returns array of our documents as documentSnapshot obj.

en firebase.utils.js 
agrego:
const collectionRef = firestore.collection('users');
chequeamos con 
 console.log({collection: collectionSnapshot.docs.map(doc => doc.data())})
 con doc.data()devuelve json 
 -------------------------------------------------------------------
 video 167 -- moving our shop data to firebase 

 comenta firebase es lo que se conoce como nosql database 
 debido a la manera que guarda la info o data 
 por ej un usuario puede tener campos como email y telef mientras que otro solo tener una imagen o una direccion...

 eso da flexibilidad aun cuando puede ser un problema para el front end 

 se puede forzar a que guarden datos o campos 
 el field puede tener diferentes tipos de datos 
 string/number/boolean/map(con key)/array(0,1...),null,timestamp, geopoint

 edita App.js porque comenta renderiza una vez 

 queremos pasar el contenido de shop.data.js a firebase de una es decir no hacerlo manualmente.

 para esto editamos firebase.utils.js 

 export const addCollectionAndDocuments = (collectionKey, objectsToAdd ) => {
    const collectionRef = firestore.collection(collectionKey);
    console.log(collectionRef)
}
luego llamamos addCollectionAndDocuments en App.js 
lo hace en componentDidMount
 -------------------------------------------------------------------
 video 168 -- moving our shop data to firebase II

 https://firebase.google.com/docs/firestore/manage-data/transactions

comenta que en firestore puedo hacer un set por vez
y esto es porque se dispara una por vez.
Que pasa entonces si en el camino se corta la conexion ...
para que sea confiable necesito que al correr la funcion se logre hacer el set de lo que quiero completo.

comenta que en un request necesito hacer un batch o group 
ya que si por ej se corta la conexion al hacer una peticion ... debo asegurarme que vuelva toda la data y no una parte, es decir o viene todo no nada gracias a este batch 

map() comenta va a devolver un nuevo array. Por eso usa en su lugar forEach() que no lo cambia 

---
muestra como hacer para que shop.data.js se agregue a firebase y luego borra el codigo que uso.

en firebase.utils.js agrega 
 const batch = firestore.batch()
    objectsToAdd.forEach(obj => {
        const newDocRef = collectionRef.doc()
       // console.log(newDocRef)
       //set de value 
       batch.set(newDocRef, obj )
    })
   return await batch.commit()

luego en App.js 
addCollectionAndDocuments('collections', 
        collectionsArray.map(
          ({title, items}) => ({ title, items})
        ))

----
Yo hago un commit:
git status 
git add -A 
git commit -m"subo shop.data.js a firebase"
git push origin master 
---
comenta que luego de hacer esto y ver como ya se agrego en firebase.. 
ahora lo va a borrar. !!
mantiene los cambios en firebase.utils.js 

comenta ahora debemos hacer un pull de nuestra base de datos en firebase en lugar de importar shop.data en nuestro shop.reducer
---------------------------------------------------------------------
video 169 -- reviewing what we have done 

hasta ahora teniamos entonces en nuestro shop.reducer a shop.data como initial value... pero ahora al subirlo a firestore ese value va a ser dinamico 

-------
pregunta: crear mas de un collection en firestore y que se relacionen?
resp: ver 
https://www.youtube.com/watch?v=o7d5Zeic63s

firestore rules:
rule 1:
-documents has limits
-documents can't have more than 20000 fields 
-documents que son accedidos al mismo tiempo por varios usuarios 1seg?

rule 2:
avoid bid data in document?

rule3:
queries are shallow 

rule4:
you are billed by the number of reads and writes you perform 
significa que si creo subcollections va a leer mas 
muestra como usa mejor un map un mismo objeto en lugar de varis subdivisiones

rule5:
queries find document in a single collection

rule6: 
array are weird 
no funcionan bien en busquedas de firestore?

-------------------------------------------------------------------
video 170 -- bringing shop data to our app

comenta que route name por ej hats es importante para el front end no para el backend 
pero ahora lo necesito 

donde vamos a colocar el fetch data?
tenemos que pensar en el arbol...de mis componentes recordar el flujo...
y en donde voy a necesitar esa data?

elige hacer el fetch en nuestro shop.component 
lo primero es convertir ese functional component en class component 
functional component:
const ShopPage = ({match}) => {
    console.log(match)
    return (
        <div className='shop-page'>
            <Route extact path={`${match.path}`} component={CollectionsOverview} />
            <Route exact path={`${match.path}/:collectionId`}  component={ CollectionPage } />
        </div>
    )
}
ahora class component:
class ShopPage extends React.Component  {
    unsubscribeFromSnapshot = null;

    componentDidMount() {
        const collectionRef = firestore.collection('collections')
        //para hacer fetch
        collectionRef.onSnapshot(async snapshot => {
          //  console.log(snapshot)
        })
    }
    render() {
        const { match } = this.props;
        return (
            <div className='shop-page'>
                <Route extact path={`${match.path}`} component={CollectionsOverview} />
                <Route exact path={`${match.path}/:collectionId`} component={CollectionPage} />
            </div>
        )
    }
}
--------------------------------
luego en firebase.utils 
export const convertCollectionsSnapshotToMap = (collections) => {
    const transformCollection = collections.docs.map(doc => {
        const { title, items } = doc.data()
        return {
            routeName: encodeURI(title.toLowerCase()),
            id: doc.id,
            title,
            items
        }
    })
    console.log(transformCollection)
}
-----------------------------------------------------------------
video 171 -- adding shop data to redux 

comenta vamos a usar nuestro reducer en nuestra transformCollection array 

en firebase.utils.js 


creo shop.types.js y shop.actions.js 

chequear/comparar codigo:
https://www.diffchecker.com/diff

cloning hasta aca 
https://github.com/Dan-Y-Ko/crown-clothing/tree/0a24a2f93a3016a8ee176a5a54b77eb3704cb893

-----
pregunta:
Why are we not unsubscribing from firebase?
resp:
you indeed need to unsubscribe it just like how we did to onAuthStateChange

--------------------------------------------------------------------
-------------------------Section 17 --------------------------------
-------------------HOC patterns ------------------------------------
video 172 -- WithSpinner HOC 

-------------HOC (High Order Component)

css animations:
https://www.w3schools.com/css/css3_animations.asp

quitamos shop.data.js  de shop.reducer 

cambio 
const INITIAL_STATE = {
    collections: SHOP_DATA
}
por
const INITIAL_STATE = {
    collections: null
}
---
al hacer el cambio salta error 
cannot convert undefined or null into object 
debo cambiar shop.selector.js 
export const selectCollectionsForPreview = createSelector(
    [selectCollections],
    collections => Object.keys(collections).map(key => collections[key])
);
------transformarlo con  un ternary para el caso en que sea null...
export const selectCollectionsForPreview = createSelector(
    [selectCollections],
    collections => collections ? 
    Object.keys(collections).map(key => collections[key]) :
    []
);
--------------
otro error cannot read property women of null 
export const selectCollection = (collectionUrlParam) =>
    createSelector([selectCollections], 
        (collections) => collections[collectionUrlParam]
    );
------------cambio por:
export const selectCollection = (collectionUrlParam) =>
    createSelector([selectCollections], 
        (collections) =>
        collections ? collections[collectionUrlParam] : null
    );

---------------------------
comenta que al trabajar con async necesitamos trabajar con loading state
creo en components/ with-spinner / with-spinner.component.jsx 

-----------
pregunta: why we don't need componentWillUnmount() { this.unsubscribeFromSnapshot(); } ?

resp: the code in shop component is written using promise-based approach while the one in app.js is written using observable based approach. In an observable based approach, you are receiving data in an endless stream so you need to unsubscribe from it or else you will get memory leaks. 

pregunta: How can we make a call API in redux?
resp: calling external API isn't covered in the course. 
If you wanted to do that you just use something like Axios and fetch the data from the external api in your action.

For example, from one of my old projects:

export const fetchUser = () => async dispatch => { 
   const res = await axios.get("/api/current_user"); 
   dispatch({ 
      type: FETCH_USER, 
      payload: res.data 
   });
};
--------------------------------------------------------------------
video 173 -- WithSpinner II 


comenta que en shop.component.jsx 
podemos agregar 
constructor() {
        super()
        this.state = {
            loading: true
        }
    }
-----
o pasar el state:
state = {
  loading: true
}
ya en el el class component react ve el state y lo resuelve sin necesidad de escribir constructor....(esto en versiones nuevas)


---------------------------------------------------------
video 174 -- quick note 
If you are still finding it difficult understanding how 
Higher Order Components can be useful, 
you have an optional video next which we explain in higher detail 
when HOCs are useful and how we can build them ourselves. Enjoy!

--------------------------------------------------------------------
video 175 -- how to build HOC 

https://github.com/ZhangMYihua/higher-order-components-explained

ej connect or WithSpinner 

json placeholder site para pruebas: 

https://jsonplaceholder.typicode.com/posts 

-----------------------------------------------------------------------
-----------------------------Section 18 -------------------------------
------------------------Asynchronoux Redux ---------------------------
video 176 -- observables  + observer pattern 

comenta que si no se usa snapShot o el onAuthStateChanged para el live reload podemos usar promise pattern 

observables y rxjs 
observerr pattern 
un observer es un piece of code with 3 functions calls on it:
1-next(nextValue)=> {do something with value}
2-error(error) => {do something with error}
3-complete()m=> {do something when finished}

mediante lo que llama suscription atamos el observer a un evento 

asi es como trabajamos con firebase... pero no todos tienen esto implementado en sus app o desarrollos 
por eso vamos a ver como usar promesas 
------------------------------------------------------------------------
video 177 -- promise pattern 

en Shop.component cambio
this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot
por 
collectionRef.get().then( snapshot => {

------------
firebase nos permite usar la base de datos como api 

mi id del proyecto: crwn-db-79248

https://firebase.google.com/docs/firestore/use-rest-api#making_rest_calls

https://firestore.googleapis.com/v1/projects/YOUR_PROJECT_ID/databases/(default)/documents/cities/LA

----------
muestra como usar fetch: 

 fetch('https://firestore.googleapis.com/v1/projects/crwn-db-79248/databases/(default)/documents/collections').then(
            response => response.json()
        ).then(collections => console.log(collections))

pero comenta es demasiado nested... 

comenta quiere sacar la peticion de componentDidMount...
es que puede usarlo en otro lugar de la app...
y no quiero escribirlo de nuevo para acceder nuevamente...
pero tampoco conviene subirlo porque quizas no nos interese descargar toda la data cuando un usuario simplemente visita el sitio...


git add -A 
git commit -m "implement code that pulls data from firestore and stores it in shop reducer, also include our WithSpinner HOC"