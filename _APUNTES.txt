
---------------------------------------Section 4 ------------------------------------------------------------
--------------------------Master project - setting up E-COMMERCE
video 56 -- linkedin

If you are looking to improve your LinkedIn profile and have others endorse your skills, we have a private ZTM LinkedIn group here. LinkedIn allows you to have recruiters message you with lots of job opportunities. You can join the group by clicking on "LinkedIn Group" and then go ahead and endorse some of the member's skills (other people will do the same for you as they join).

If you have any questions, reach out in our private Discord chat community in the #job-hunting channel!

UPDATE!!! Zero to Mastery is officially a recognized school!

What does this mean for you? It means that you can add it as an educational institution on LinkedIn as part of your profile to wow those employers (as your education history). Check it out here. To add it to your profile:

Step 1: Go to personal LinkedIn profile

Step 2: Scroll down to the Education section

Step 3: Click the +

Step 4: Type in Zero To Mastery Academy
----------------------------------------------------------------------------------------------------------------
video 57 -- the long road ahead 

para pagos usamos la api de Stripe 
login con cuenta de google 
firebase 
---------------------------------------------------------------------------------------------------
video 58 -- project overview
---------------------------------------------------------------------------------------------------
video 59 -- github project repo

github.com/ZhangMYihua 
ver lessonNum.. por si tengo problemas 

git clone https://github.com/ZhangMYihua/lesson-1.git nombreCarpeta
npm install 

luego de trabajar en el proyecto supongamos lo quiero subir a mi repo personal...
git remote veo sale origin
git remote remove origin 
me logeo en mi cuenta de github creo una repo para este proyecto
git remote add origin https://github...mirepo 

---------------------------------------------------------------------------------------------
 If you wish to make commits and push code up after cloning down from any of the GitHub links, you should actually fork the project first. The reason for this is because the GitHub project links provided are pointing to repositories you do not own, in order to own the repository, you have to fork it so you get a copy of the project in your own GitHub account that you do own!

 ----------------------------------------------------------------------------------------------------------
 video 62 -- e commerce homepage + sass 
 
 recordar usar powershell como administrador para no tener permiso de escritura en Datos/

 npx create-react-app crwn-clothing

en el proyecto usamos sass:
 https://www.npmjs.com/package/node-sass

 npm install node-sass
(en caso de necesitar borrar usa rm -rf .... o rm -rf node_modules)

 
npm install 

creamos src/homepage.styles.scss (descargue los estilos )

creamos src/homepage.component.jsx (importo sass)
se trata de un functional component porque no vamos a necesitar state o life cycle

quitamos de index.js
serviceWorker.unregister();
y el header de App.js 
borramos contenido de App.css

git remote add origin https://github.com/sitiojcb/crwn-clothing.git

git remote add origin git@github.com:sitiojcb/crwn-clothing.git
git status 

git add -A 

git commit -m"created project with react and added files for homepage" 
git push origin master 

---------------------------------------------------------------------------------
video 63 -- project files + Modules 

comenta que en versiones anteriores jest (para testeo) causaba errores.
ahora lo han quitado 

------------------------------------------------------------------------------------
video 64 -- project component architecture 

comenta usar react extension para Chrome
esta extension se actualizo ,  no lo voy a ver como en el video 
debo buscar: components y profiler 

pregunta: export default vs const...
resp:
export const is named export, this is how you import it

import {abc} from 'abc'
--------
export default is unnamed export, this is how import it

import anyname from 'abc'
------------------------------------------------------------------------------------
video 65 -- css y scss 
comenta lo van a proporcionar ellos.
-----------------------------------------------------------------------------------
video 66 -- homepage and directory components 

crea carpetas:
components componentes reusables
pages paginas

muevo homepage.components.jsx y actualizo en App.js 
para menu-items.component usamos functional component 
const MenuItem = () => (
    uso parentesis para evitar escribir return {}
)
------------
comenta que en lugar de pasarle props como parametro y luego usar props.title 
simplemente uso destructure con {title}

comenta que directory.component necesito sea class component porque necesito guardar el state de los menu-items

comenta que en react podemos pasar los estilos con 
    backgroundImage: `url(${imageUrl})`
    }}>
    aca imageUrl viene como prop 

ver mas template literals 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
------------------------------------------------------------------------------------
video 67 -- styling menu-items 

cubic bezier 
https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function

google font source open sans condensed 
https://fonts.google.com/?query=open+sans+condensed&selection.family=Open+Sans+Condensed:wght@300&sidebar.open=true

en public/ index.html agregamos:
<link href="https://fonts.googleapis.com/css2?family=Open+Sans+Condensed:wght@300&display=swap" rel="stylesheet">
luego en App.css en el body agrego:
font-family: 'Open Sans Condensed', sans-serif;

-----
git add .
git commit -m "broken homepage into small comp and style menu-item comp"
git push origin master 
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------Section 5 ------------------------------------------------------------------------
----------------------------------------------------React router and routing -------------------------------------------------------------------
video 68 -- routing in react 

se usa paquete react route 
comenta que esta libreria usa algo provisto por el navegador llamado history api 
--------
Earlier, in single page application, there is an issue of navigation, we can't back and forth as there are no other link or pages, but with react router, which makes the  use of history API provided by browser, which allows single page application to go back and forth without any issues. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
video 69 -- routing in our project 

react router documentation 
https://reactrouter.com/web/guides/quick-start

react router dom 
https://www.npmjs.com/package/react-router-dom

npm install --save react-router-dom

sirve para cuando tengo varias paginas. hay otras librerias pero esta es la mas popular.

nota: ver que en el video resuelve problema creado en  la instalacion con una version de jest ... yo no lo tuve porque instale versiones compatibles mas nuevas 
---------------
para usar react dom necesito importarlo en index.js 
import { BrowserRouter } from "react-router-dom";

BrowserRouter es un componente. por eso lo coloca envolviendo al otro.

y en App.js 
lo importo y cambio <HomePage /> por 
  <Route exact path='/' component={HomePage} />

component por el componente que quiero renderizar 
path='/' cuando visito / significa vemos el componente HomePage
exact por defecto es true, significa que si paso / debe ser exacto 

luego usa Switch que se supone ayuda ya que renderiza lo primero que encuentra en el path 
da ej de '/' y de '/hats' hay entonces mas de una ruta, con switch al encontrar / renderiza eso y nada mas.
sostiene que ayuda a que no se rendericen varios componentes/rutas por accidente 

lo usa sin exact o exact='false' 

mas info switch:
https://dev.to/danhjoo7/using-a-switch-component-in-react-router-d2k
--------------------------------------------------------------------------------------
video 70 -- react router dom 

demo:
A small app bootstrapped with CRA to explain basics of react-routing

https://github.com/ZhangMYihua/react-router-demo


-------------------------------------------------------------------------------------
video 71 -- withRouter() 

Higher order components 
https://reactjs.org/docs/higher-order-components.html

Concretely, a higher-order component is a function that 
takes a component and returns a new component.

comenta que el problema de usar history en el router es que debo pasar como props a los childrens... se va haciendo engorroso.
(lo llaman tambien prop drilling es cuando se pasan todas esas props en este caso history a traves de los childrens.)

otra solucion es usar Higher order component {withRouter}
por eso importo en menu-item.component
import { withRouter } from 'react-router-dom';
luego exporto 
export default withRouter(MenuItem);
y ahora el componente MenuItem tiene acceso a location/match que necesitamos para el link

----
en directory.component cambio
{this.state.sections.map(({title, imageUrl, id, size}) => (
<MenuItem key={id} title={title} imageUrl={imageUrl} size={size} />
 ))}
 por 
  {this.state.sections.map(({ id, ...otherSectionProps }) => (
  <MenuItem key={id} {...otherSectionProps} />
  ))}
  ya que comenta que en lugar de agregar por ej linkUrl usamos la ventaja de js6 con destructuring ... 
  git add .
  git commit -m "update withRouter HOC"
  git push origin master 

--------------------------------------------------------------------------------------
------------------------------Section 6 -----------------------------------------------
---------------------------Form components ------------------------------------------
video 72 -- shoping data 
descargo fotos o uso const shop 

---------------------------------------------------------------------------------------
video 73 -- shop page 

creo shop folder dentro de pages y coloco shop.component.jsx 
creo components/collection-preview y collection-preview.component.jsx 
-------------------------------------------------------------------------------
video 74 -- collection item 

creo collection-item y collection-item.component.jsx
luego en collection-preview.component 
lo importo y cambio 
<div key={item.id}>{item.name}</div>
por 
 items.filter((item,idx) => idx<4 ).map((id, ...otherItemProps) => (
  <CollectionItem key={id} {...otherItemProps} />
))

git status 
git add -A 
git commit -m "update collection-preview collection-item"
git push origin master 
-------------------------------------------------------------------------
video 75 -- header component

creamos header 
y assets /crown.svg 
ver que para importar svg has sintaxis especial en react !!
import {ReactComponent as Logo} from ..
luego usamos como <Logo> 
--
comenta que para que el header este presente lo colocamos por encima del switch 
 <Header />

 -----------
 pregunta:
 cuando sigo el link del navegador puedo ir a la pag sin problema, pero si coloco la url directamente no, voy a 404 por que?

 resp:
 https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages

pregunta:
Why didn't we use <img src="..svg path"> instead of importing it as a component?
resp:
both methods work, use whatever you like
---
problemas usando otro logo comentan usar:
<Logo className='logo'  height="60px" width="60px"/>
mas logos svg en 
https://www.flaticon.com/free-icon/dollar_3037150?term=price&page=1&position=53


git status 
git add -A 
git commit -m "adding header" 
git push origin master 

------------------------------------------------------------------
video 76 -- importing svg in react
import { ReactComponent as Logo }

This is a new special syntax when importing SVG in React. The ReactComponent import name is special and tells Create React App that you want a React component that renders an SVG, rather than its filename. You can read more about it here, but keep in mind that this is a React library special syntax:

https://facebook.github.io/create-react-app/docs/adding-images-fonts-and-files

--------------------------------------------------------------------------------------
video 77 -- forms in react 

https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form

eventPreventDefault()
https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault

vamos a ver user authentication 
comenta que como tenemos por ej botones que se repiten en un formulario.. vamos a hacer un componente reusable.
cada componente sign in y register van a tener cada uno su propio state.
comenta que no hace falta compartir entre ambos por eso no necesita colocar el state en la pagina por encima de estos componentes.
comenta que como regla conviene tener el state en el nivel mas bajo posible 
--------------------------------------------------------------------------------------
video 78 -- sign in component 
creo dentro de pages sign-in-and-sign-up
y dentro sign-in-and-sign-up.component.jsx 
---
luego en components creo sign-in/sign-in.component 
comenta que 
 this.setState({ [name] : value}) aca [name] va a ser email y luego password.

 pregunta mia:
 porque usamos required !! no hay algo nativo en react para chequear errores?
 y sanitizar las entradas? 
 ---------------------------------------------------------------------------------------
 video 79 -- form input component 

 creo components/form-input/form-input.component.jsx
comenta 
const FormInput = ({ handleChange, label, ...otherProps }) 
necesito handleChange porque bubbleUp any onChange that input have 
-colocamos el label y el input juntos en un div group 
-necesito el label como prop para usarlo selectivamente 

 comenta:
   (<label className={`${otherProps.value.length ? 'shrink' : ''}`} form-input-label>{label}</label>) 
   siempre vamos a tener clase form-input-label pero cuando el usuario agrega o tipea algo vamos a ver que agrega clase shrink 

importamos FormInput en sign-in.component y cambio
<form onSubmit={this.handleSubmit}>
<input name="email" type="email"
por 
<form onSubmit={this.handleSubmit}>
<FormInput name="email" type="email"
--
tambien cambio:
 onChange={this.handleChange}
 por 
 handleChange 
 agrego ademas label="email" y quito el 
 <label>Email</label>

-------------------------------------------------------------------------------------
video 80 -- custom button 

creo custom-button/custom-button.component.jsx 
luego cambio en sign-in.component.jsx
<input type="submit"  value="Submit Form" />
por 
<CustomButton type="submit">
Sign In
</CustomButton>
-------------------------------------------------------------------------------------
---------------------------------Section 7 ------------------------------------------
------------------------Firebase + User authentication ------------------------------
video 81 -- overview 

necesitamos guardar la info recibida en una base de datos 
vamos a usar firebase 
---------------------------------------------------------------------------------------
video 82 -- firebase intro 

https://firebase.google.com/

backend:
1 server 
2 database 
3 authentication 
----------
hasta ahora usamos shop.data.js para la info pero es a modo de ejemplo.
en la realidad necesitamos una base de datos.


pregunta: mongodb vs firebase ?
resp: parece que firebase resuelve mas que solo database... 
----------------------------------------------------------------------------------------
video 83 -- adding a project to firebase 

https://www.npmjs.com/package/firebase

me logeo en 
https://firebase.google.com/
go to console 
add project (lo nombro crwn-db)
--creo app asociado con webjcb para google analytics

una vez creado nos lleva al dashboard 
sobre el sidebar vemos diferentes planes 
usamos el free -- spark
----
vemos tambien en el sidebar el sector Develop 
nos interesan authentication y database 
comenta que storage es para videos/imagenes assets en general 
-----------
desde la ventana principal vemos el icono </> que es el de web !!

me pide registrar app con un nickname...usamos el mismo crwn-db 
comenta que no necesitmos la parte de hosting 
---
me da el sdk:
<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/7.19.0/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries -->
<script src="https://www.gstatic.com/firebasejs/7.19.0/firebase-analytics.js"></script>

<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyCq_FqyhvOMizfVEbDMykbbe69NL71Ynd4",
    authDomain: "crwn-db-79248.firebaseapp.com",
    databaseURL: "https://crwn-db-79248.firebaseio.com",
    projectId: "crwn-db-79248",
    storageBucket: "crwn-db-79248.appspot.com",
    messagingSenderId: "732625627403",
    appId: "1:732625627403:web:58576922fff33f87271a0e",
    measurementId: "G-B2VZW0YJY0"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>
---------------------------------------------------------
instalo firebase en mi proyecto:

npm install --save firebase
-----------------------------------------------------------------------------------------
video 84 -- note about github 

In the upcoming lessons, we will be adding firebase to our React application. One thing to note is that we will be adding a config object that we get from firebase into our files, and in that config object is an API key. Typically it is good practice not to expose your API key publicly, but in the case of firebase, we have to do so because this is how firebase knows the application is ours! This is perfectly safe, and the intended purpose of this public API key. If you commit your code to Github, you may get a warning from GitGuardian having caught a google key, but GitGuardian has acknowledged that this is not an issue here!

https://twitter.com/search?q=firebase%20api%20key%20gitguardian&src=typd

How we secure our data is actually done with security rules in the firebase dashboard, but we will cover that in a later lesson! So please continue the course without worry :)

---------------------------------------------------------------------------------
video 85 -- google sign in authentication 

https://firebase.google.com/docs/reference/js/

creamos carpeta firebase 
y firebase.utils.js 
comenta que al importar 
import firebase from 'firebase/app'
import 'firebase/firestore'
import 'firebase/auth'

necesito importar firebase como base pero como es muy grande luego tomo solo lo que necesito, en este  caso firestore y auth 

cuando termina de editar firebase.utils.js 
necesito decirle a google me permita usar google auth 
volvemos a firebase 
Develop/authentication --> set-up-sign-in method 
--habilito google 
project-732625627403
--seleccione email 
maildecali@gmail.com
----------------------
luego vamos a sign-in.component y agrego 
import {signInWithGoogle} from '../../firebase/firebase.utils'
y
<CustomButton onClick={signInWithGoogle}>
Sign In with Google
</CustomButton>
----------------------------------------------------------------------------------------
video 86 -- cloning from this point on 

An important thing to note about any GitHub links that you fork and clone from this point forward is that you must replace the config  in firebase.utils.js  with your own config object in the firebase project overview that we learned in the last lesson. The config object is how firebase knows that your application is connected to your firebase account and database!
-------------------------------------------------------------------------------------
video 87 -- signin with google II 

necesito que mi app sepa cuando alguien se ha logeado con exito 
en App.js 
import {auth} from './firebase/firebase.utils'
y convertimos functional component en class component 
function App() { ahora va a ser 
class App extends React.Component {
  gracias a esto tenemos ahora acceso al estado.

  comenta que con firebase obtenemos user authentication session persistance 

  vemos en app como modifica para ver el estado y chequear si esta logeado o no 

-------------------------------------------------------------------------------------
video 84 -- how to fix 403 - restricted_client error 

It's possible you may encounter a google Authorization error that says 403:restricted_client. 
If you do, here are the instructions to fix it!

There should be a Learn More link in the popup, clicking that should take you to the Google APIs console that has three tabs under the header named Credentials, OAuth Consent Screen, and Domain Verification. 
Go to the OAuth Consent Screen tab and update the Application Name to 
"crwn-clothing" or any other name you're comfortable with 
(i.e. the name of your project). 
Click on save at the bottom, then try logging into your verified Google account thereafter.

Thanks to Dylan Flohrschutz for the instructions and solution!

-------------------------------------------------------------------------------------
video   89 -- google authentication III 

https://www.w3schools.com/cssref/css3_pr_box-sizing.asp

vemos que cuando el usuario esta logeado tenemos que darle opcion de salir 
debemos agregar sign out en el nav 
para saber el estado agrega a <Header>
 <Header currentUser={this.state.currentUser} />
 luego en header.component 
 importo auth y en el componente agrega
  {currentUser 
        ? 
        <div className='option' onClick={() => auth.signOut()}>Sign Out </div> 
        : 
        <Link className='option' to='/signin'>Sign In</Link>}
  es decir si esta logeado le da el boton de logout sino tiene el de signin 

luego en el custom button 
agrego prop isGoogleSignIn 
 <button className={`${isGoogleSignIn ? 'google-sign-in' : ''} custom-button`}

------------
git status 
git add - A 
git commit -m "integrated firebase and google auth" 
git push origin master 

--------------------------------------------------------------------------------------
video 90 -- firebase firestore  !! debo usar cloud Firestore (antes database)

necesito ademas chequear si existe un usuario cuando quiere ingresar con su email/passw 
tenemos que entender como funciona firestore 

Develop/database --> create database (start in test mode)
se trata de nosql database (como mongodb) por eso en lugar de tablas usamos 
collections 
ej collection user 
firestore.collection(users).doc('id9949310342')
o sea de la tabla users el usuario con ese id 
otra forma 
firestore.doc('/users/id99..')

-----------------------------------
##########################
use primero realtime firestore y me da error no puedo seguir el curso 

error de firestore ?? hubo actualizaciones de google ahora en lugar de database en el sidebar veo realtime database o 
cloud firestore 
comenta usar modo nativo:
https://stackoverflow.com/a/51850105/5338829

usando modo nativo:
https://console.cloud.google.com/firestore/data?project=api-project-1034170227934

asi que ahora intento con cloud firestore:
parece que ahora si puedo!! 
creo users (collection)
field:displayName 
valor: cali
---
ahora si veo puedo agregar una colleccion dentro de users...
en el ej agrega cartItems 

para usarlo crea test.js 
import firebase from 'firebase/app'
import 'firebase/firestore'
const firestore = firestore.firestore();

firestore.collection('users').doc('9FSA1cXXu22FSfpDZiw7')
otra forma
firestore.doc('/users/9FSA1cXXu22FSfpDZiw7/')

-----------------------------------------------------------------------------------
video 91 -- async await 
go to Appendix 1: Key Developer Concepts at the bottom of the course video player, and watch the video titled Async Await first before the next lesson.
-------------------------------------------------------------------------------------
video 92 -- storing user data in firebase 

comenta que para trabajar con firestore hay reglas 
deja un firebase.pdf 

agrerga export const createUserProfileDocument  en firebase.utils.js 

luego lo importo en app y usa
createUserProfileDocument(user) para ver que devuelve id, path aun cuando se que no existe porque le pase un id falso.. 
comenta que esto siempre va a devolvernos un objeto 
en el pdf lo explica 
le decimos a firebase que guarde o que nos de de la base de datos 
documentRef object para crud operations 
set()
get() -- we get snapshot object 
update()
delete()
---------------------
 const userRef = firestore.doc('users/1242423')
    //para obtener el snapshot oj 
    const snapShot = await userRef.get()
con esto vemos devuelve prop exists false/true 

snapShot representa la data 
pero si quiero guardar data necesito usar documentRef !!
---------------------------------------------------------------------------------------
video 93 -- Note: Firestore update regarding permissions 

There has been a recent update in Firebase's database for new users where by default, there is a permission rule that disables reading from the database after 30 days! If this is not changed, some of you may start to see an error in your application saying FirebaseError: Missing or insufficient permissions.

This can be quickly fixed by navigating to the rules tab in the database of your firestore console.

You will land on this page, which manages the permissions for your database. We will cover this section in greater depth later in the course.

The text you can edit, and the part to focus on is line 4 and 5:

If you do not see request.time < timestamp.date(year, month, day); on line 5, you don't need to worry about this. If you do, just remove it, and replace the : if with a ; on line 4.

Your final result should look like:
With that you should be good to continue on!
---------------------------------------------------------------------------------
video 94 -- Storing user data in our app 
in previous video we store the user data in our database but now we have to store that data in the 'state', of our app so we can use it in our app!

por eso modificamos el componentDidMount 
componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async user => {
      createUserProfileDocument(user)
      //this.setState({ currentUser: user })
     // console.log(user)
    })
    ahora 
     componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {
      if(userAuth) {
        const userRef = await createUserProfileDocument(userAuth)
        userRef.onSnapshot(snapShot => {
         // console.log(snapShot.data)
         this.setState({
           currentUser: {
             id: snapShot.id,
             ...snapShot.data()
           }
         }, () => {
           //comenta no puedo pasarlo fuera del setState asi que lo paso como segundo parametro (video 94)
             console.log(this.state)
         })
        })
        
      } else {
        //en caso de no estar logeado pasa a ser null 
        this.setState({currentUser: userAuth})
      }
  
    })
  }

  luego quito el console log this.state 
  -------------------------------------------------------------------------------------
video 95 -- sign up component 
creo sign-up/sign-up.component.jsx 
y styles.scss 
-------
pregunta: 
how do [ ] brackets work when you call this.setState
this.setState({ [name]: value });
resp: this is just a way to handle every form input change with just 1 handler method.

ver mas:
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics

------
pregunta: How do you make the symbol != it shows up something like this =/= but I do != and doesnt shows up

resp: In section 3 Lesson 16 you will find Yihua's exact font he is using.
 Aside from that in VS code go into  settings --> text editor --> font. 
 Here you will find a setting called Font Ligatures. 
 Make sure that is enabled. 
 Font ligatures are what is changing the !== to =/=
------
 pregunta: The componentDidMount is load only once during compoent lifecyle in App.js then how it is able to change state every time when we signin and signout.??

 resp: The componentDidMount function is called only once but when it executes, it registers an event listener onAuthStateChanged provided to us by firebase auth object.

Whenever the user authentication state is changed, i.e., whenever a user signs-in or signs-out, onAuthStateChanged method invokes the function passed as a param to it.

In our case, this method is invoked by onAuthStateChanged.
----------------------------------------------------------------------------------------
video 96 -- Sign Up with email and password 

en sign-in-and-sign-up.component.jsx agrego component sign up 
agrega estilos a sign-in-and-sign-up 

luego en App.js agrego console.log(this.state)

recordar tener habilitada la Authorization en Firebase para email sign in ! ademas de la de google sig in 

git status 
git add -A 
git commit -m "store authenticated user in db firestore" 
git push origin master 

----------------------------------------------------------------------------------------
video 97 -- Sign Up with email and password 

en sign-in.component importo auth 
ahora en handleSubmit 
handleSubmit = event => {
  la convertimos en async 

  --------------------------------------------------------------------------------------
  video 98 --note on our custom button 
One quick note due to the frequency of this question popping up! If you see that your sign in with google button causes the email and password fields to trigger asking the user to fill these in, simply add the property type="button" to our google sign in button! The reason this happens is because any buttons inside of a form element will cause the form to treat the button as type="submit" by default. We don't want that for our google sign in button though, so just make sure to add type="button" to our google sign in CustomButton.

Your code might look like:
<CustomButton type="button" onClick={signInWithGoogle} isGoogleSignIn>
  Sign in with Google
</CustomButton>

---
pregenta:
usar constructor y super? 
resp:
They discussed this somewhere in the thrid chapter. It's sytacitc sugar added by Babel/Webpack, so you don't need to type out the constructor, just for initializing the state.
Be aware: When you need props, this does not work.

About super: take a look here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Sub_classing_with_extends
If you extend a class and write a constructor, you need to call super. If you leave out the constructor, it just uses the parent constructor.
-------------

pregunto yo: 26/08/2020
no se como chequear si existe snapshot 
ya que eso evitaria error currenUser Null cuando hago logout en el login ...

resp yo: if(!snapShot.exists) { habia escrito exist en lugar de exists !!
------------------------------------------------------------------------------------------------
Quiz: 
Let's take a quiz to remember the fundamental pattern we must follow if
 we use the onAuthStateChanged() or onSnapshot() methods!

 1) Whenever we call the onAuthStateChanged() or onSnapshot() methods 
 from our auth  library or referenceObject, we get back a function that lets us 
 unsubscribe from the listener we just instantiated. 
 Which lifecycle method should we use to call that unsubscribe method in?

resp: componentWillUnmount 
Calling the unsubscribe function when the component is about to unmount is the best way
 to make sure we don't get any memory leaks in our application related to listeners 
 still being open even if the component that cares about the listener 
 is no longer on the page.
 ----------------------------------------------------------------------------------------------
 --------------------------------Section 8 ----------------------------------------------------
 ----------------------- Redux 1 --------------------------------------------------------------
 video 100 -- overview 

 comenta lo usamos (a redux) como state managment 
redux lo hace facil de debug 
-----------------------------------------------------------------------------------------------
video 101 -- intro 

redux propone eliminar states y usar props que los pasamos a traves de los componentes 
y el state lo guarda en el store ( un objeto mayor)

-----------------------------------------------------------------------------------------------
video 102 -- redux concepts 
1-cuando nuestra app crece conviene usar redux 
2- useful to share data between components
normalmente con react debo subir hacia el padre para poder compartir (one data flow)
3-predictable state managment using 3 principles:
1)single source of true (one big object that describes the entiry state of the app ROOT REDUCER)
2)state is read only
3)changes using pure functions 

nuevo vocabulario con redux:
-action (algo que el usuario hace , click button )
-root reducer (es una funcion recibe un input y da output que influye en el store )
-store (aca se actualiza el state)
-dom changes 
----------------------
redux is for global state management!

redux usa flux pattern 
action -> dispatcher -> store -> view 

comenta que flux reemplaza al modelo MVC 
comenta que con redux ahora no necesitamos en react this.state 
sin embargo aclara que No todos los states  
lo importante se guarda en redux store pero otros como por ej form input mantienen sus this.state 

----------------------------------------------------------------------------------------------------
video 103 -- redux in our app 

comenta que con redux los componentes mediante las acciones actualizan el reduce state de diferentes componentes y estos actualizan solo un slice del state y entre todos estos slices van a modificar el Root State principal o de mi app. Luego desde aca se pasan como props a los componentes .

comenta que redux puede usarse en varios frameworks, no solo en react!
----------------------------------------------------------------------------------------------------------
video 104 -- redux actions and reducers 

los reducers son funciones que tienen dos parametros state anterior (currentState) y action y en base a esa accion determina si debe renderizarse y obtener un nuevo objeto o no .

pregunta: After mapStateToProps compares the previous state with the new one, and let's suppose that they're different. When the Virtual DOM comes in play? I mean the state changes, then the Virtual DOM is updated, compared tho the DOM and then updates the parts that are different? 

resp:
https://programmingwithmosh.com/react/react-virtual-dom-explained/
----------------------------------------------------------------------------------------------
video 105 -- settin up redux I 
react redux 
https://www.npmjs.com/package/react-redux

npm install react-redux
------------------
redux 
https://www.npmjs.com/package/redux

npm install --save redux
------------
redux logger 
https://www.npmjs.com/package/redux-logger

npm i --save redux-logger
-----------------
luego de instalar vamos a index.js 
los agregamos para poder acceder no solo al store sino a los reducers 
import { Provider } from 'react-redux' 
Provider es un componente de react-redux y este debe envolver a nuestra app 
al ser el padre de todos los componentes va a acceder al store 

redux flow vemos agrega Middleware 
action -> Middleware -> dispatcher -> store -> view 

creamos folder redux 
root-reducer.js 
folder user y user-reducer.js 

pregunta: 
What is 'SET_CURRENT_USER' exactly? 

resp: redux checks if the type of action matches the case and if matched returns the new state, with it you know what action type caused the state change

-------------
pregunta:
1. We set the case as 'SET_CURRENT_USER' in the switch statement. Is SET_CURRENT_USER user-defined for our app or it's something built-in to Redux? Can I change it with some other string?

2. We return currentUser with action.payload. I didn't understand this statement. What does action.payload means and what it does here?

resp:
1. 'SET_CURRENT_USER' is not something built into Redux and yes you can change it to some other string. You eventually will move your action types into a consts file.

I find it helpful to consider it a "command" that you defined. When that part of the code executes, it sends off the 'SET_CURRENT_USER' command (we call these actions). That action is absorbed by the reducer that contains your switch statement and then actually modifies state.



So, you might define an action like this in your action file

export const loginUser = (loginStuff) => ({
   type: LOGIN_USER
   payload: loginStuff
});

From your login button, you'd call that action. 
Then that action is sent to your reducers file that has your switch statement. It checks the type and matches on the LOGIN_USER command.

It then reads the payload (in the example above, loginStuff might be stuff like a username and password) and then executes some code to modify the state. 



2. action.payload is just the data that was sent along in the original action. So in that example, the currentUser was sent in the payload. The reducer grabs the payload (userStuff) and does something with it (like set the current user to the state)
-------------------------------
pregunta: cuando usar destructuring (pero se equivoca porque no era destructing)
resp:
const a = 1
abc({ a })
is equivalent to
const b = {a:1}
abc({...b})
you are not destructuring, you are creating an object literal, you can understand this as structuring, because it can be destructure later

destructuring only happen when

1. before =  operator

const {a,b,c,}=abc
2. when naming parameter

const efg = ({e,f,g}) =>{}

do not confuse this with function invoking abc({ a })
------------------------------------

comenta que el root reducer es un json y el key en este primer ej es user 

---------------------------------------------------------------------------------------
video 106 -- setting up redux II 

necesitamos crear el store 
dentro de redux creo store.js 

comenta 
const middlewares = [logger]

const store = create.store(rootReducer, applyMiddleware(...middlewares))
de esta manera en applyMiddleware obtenemos todo mediante spread todas las funciones y valores del array logger 
tambien puede funcionar sin middlewares 
const store = create.store(rootReducer, applyMiddleware(looger))

importamos el store en index.js 
y gracias a 
 <Provider store={store}> ahora podemos pasar props a nuestros components o extraer de estos 

 --
 necesito crear la funcion action que va a cambiar el reducer ..
creo user/user.actions.js

 type: 'SET_CURRENT_USER', comenta que como no va a cambiar su valor usamos mayusculas/capital 
-----------------------------------------------------------------------------------
video 107 -- connect() and mapStateToProps

https://react-redux.js.org/api/connect

necesitamos el valor de currenUser en el header component que hasta el momento lo viene tomando desde el app.js 
importo connect en el header component 
import { connect } from 'react-redux'
comenta connect is a high order component que es una funcion que  tiene como argumento otros componentes y retorna otro subcomponent 

cambiamos export default Header; por 
const mapStateToProps = (state) => ({
    currentUser: state.user.currentUser
})
export default connect(mapStateToProps)(Header);

y con esto ahora podemos cambiar en App.js 
<Header currentUser={this.state.currentUser} />
ahora 
<Header />
-------------------------------------------------------------------------------------
video 108 -- mapDispatchToProps 

debemos cambiar app.js agregando connect 

const mapDispatchProps = (dispatch) => ({
  setCurrentUser: user => dispatch(setCurrentUser(user))
})
export default connect(null, mapDispatchProps)(App);

y con esto quitamos el constructor del app.js
 constructor() {
    super() 
    this.state = {
      // currentUser : null // ahora lo coloco en user-reducer
    }
  }
  ----------------------------
  y en el snapShot cambio el setState 
// console.log(snapShot.data)
  this.setState({
    currentUser: {
      id: snapShot.id,
      ...snapShot.data()
    }
  })
  -------------------
  ahora 
  const {setCurrentUser} = this.props
setCurrentUser({
      id: snapShot.id,
      ...snapShot.data()
  })
-----------------------
  cambio tambien 
  <Header currentUser={this.state.currentUser} />
  por <Header />

---------------------------------------------------------------------------------------
video 109 -- user redirect and user action type 

https://reactrouter.com/web/api/Redirect


